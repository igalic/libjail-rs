var searchIndex = {};
searchIndex["backtrace"] = {"doc":"A library for acquiring a backtrace at runtime","items":[[3,"Frame","backtrace","A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.",null,null],[3,"Symbol","","A trait representing the resolution of a symbol in a file.",null,null],[3,"SymbolName","","A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.",null,null],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",null,null],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",null,null],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",null,null],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified closure.",null,null],[11,"ip","","Returns the current instruction pointer of this frame.",0,null],[11,"symbol_address","","Returns the starting symbol address of the frame of this function.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","Returns the name of this function.",1,{"inputs":[{"name":"self"}],"output":{"generics":["symbolname"],"name":"option"}}],[11,"addr","","Returns the starting address of this function.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"filename","","Returns the file name where this function was defined.",1,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"lineno","","Returns the line number for where this symbol is currently executing.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new symbol name from the raw underlying bytes.",2,null],[11,"as_str","","Returns the raw symbol name as a `str` if the symbols is valid utf-8.",2,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"backtraceframe"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"backtracesymbol"}}],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",3,{"inputs":[],"output":{"name":"backtrace"}}],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",3,{"inputs":[],"output":{"name":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",3,null],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"from","","",3,{"inputs":[{"generics":["backtraceframe"],"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["backtraceframe"],"name":"vec"}}],[11,"ip","","Same as `Frame::ip`",4,null],[11,"symbol_address","","Same as `Frame::symbol_address`",4,null],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",4,null],[11,"name","","Same as `Symbol::name`",5,{"inputs":[{"name":"self"}],"output":{"generics":["symbolname"],"name":"option"}}],[11,"addr","","Same as `Symbol::addr`",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"filename","","Same as `Symbol::filename`",5,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"lineno","","Same as `Symbol::lineno`",5,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"backtrace"}}]],"paths":[[3,"Frame"],[3,"Symbol"],[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"]]};
searchIndex["backtrace_sys"] = {"doc":"","items":[[4,"backtrace_state","backtrace_sys","",null,null],[5,"backtrace_create_state","","",null,null],[5,"backtrace_syminfo","","",null,null],[5,"backtrace_pcinfo","","",null,null],[6,"backtrace_syminfo_callback","","",null,null],[6,"backtrace_full_callback","","",null,null],[6,"backtrace_error_callback","","",null,null]],"paths":[]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"paths":[]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either [big-endian or little-endian order].","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"BE","","A type alias for [`BigEndian`].",null,null],[6,"LE","","A type alias for [`LittleEndian`].",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends [`Read`] with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[8,"WriteBytesExt","","Extends [`Write`] with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigendian"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16_into","","",3,null],[11,"read_u32_into","","",3,null],[11,"read_u64_into","","",3,null],[11,"write_u16_into","","",3,null],[11,"write_u32_into","","",3,null],[11,"write_u64_into","","",3,null],[11,"from_slice_u16","","",3,null],[11,"from_slice_u32","","",3,null],[11,"from_slice_u64","","",3,null],[11,"from_slice_f32","","",3,null],[11,"from_slice_f64","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16_into","","",4,null],[11,"read_u32_into","","",4,null],[11,"read_u64_into","","",4,null],[11,"write_u16_into","","",4,null],[11,"write_u32_into","","",4,null],[11,"write_u64_into","","",4,null],[11,"from_slice_u16","","",4,null],[11,"from_slice_u32","","",4,null],[11,"from_slice_u64","","",4,null],[11,"from_slice_f32","","",4,null],[11,"from_slice_f64","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["failure"] = {"doc":"An experimental new error-handling library.","items":[[3,"Backtrace","failure","A `Backtrace`.",null,null],[3,"Compat","","A compatibility wrapper around an error type from this crate.",null,null],[3,"Context","","An error with context around it.",null,null],[3,"SyncFailure","","Wrapper for `std` errors to make them `Sync`.",null,null],[3,"Error","","The `Error` type, which can contain any failure.",null,null],[3,"Causes","","A iterator over the causes of a `Fail`",null,null],[5,"err_msg","","Constructs a `Fail` type from a string.",null,{"inputs":[{"name":"d"}],"output":{"name":"error"}}],[11,"new","","Constructs a new backtrace. This will only create a real backtrace if the crate is compiled in std mode and the `RUST_BACKTRACE` environmental variable is activated.",0,{"inputs":[],"output":{"name":"backtrace"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"backtrace"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"compat"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"compat"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"compat"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"compat"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Unwraps this into the inner error.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Creates a new context without an underlying error message.",2,{"inputs":[{"name":"d"}],"output":{"name":"context"}}],[11,"get_context","","Returns a reference to the context provided with this error.",2,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"d"}],"output":{"name":"context"}}],[11,"new","","Wraps a non-`Sync` `Error` in order to make it implement `Fail`.",3,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"f"}],"output":{"name":"error"}}],[11,"cause","","Returns a reference to the underlying cause of this `Error`. Unlike the method on `Fail`, this does not return an `Option`. The `Error` type always has an underlying failure.",4,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"backtrace","","Gets a reference to the `Backtrace` for this `Error`.",4,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}],[11,"context","","Provides context for this `Error`.",4,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"context"}}],[11,"compat","","Wraps `Error` in a compatibility type.",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"compat"}}],[11,"downcast","","Attempts to downcast this `Error` to a particular `Fail` type.",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"root_cause","","Returns the \"root cause\" of this error - the last value in the cause chain which does not return an underlying `cause`.",4,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"downcast_ref","","Attempts to downcast this `Error` to a particular `Fail` type by reference.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Attempts to downcast this `Error` to a particular `Fail` type by mutable reference.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"causes","","Returns a iterator over the causes of the `Error`, beginning with the failure returned by the `cause` method and ending with the failure returned by `root_cause`.",4,{"inputs":[{"name":"self"}],"output":{"name":"causes"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"ResultExt","","Extension methods for `Result`.",null,null],[10,"compat","","Wraps the error in `Compat` to make it compatible with older error handling APIs that expect `std::error::Error`.",5,{"inputs":[{"name":"self"}],"output":{"generics":["compat"],"name":"result"}}],[10,"context","","Wraps the error type in a context type.",5,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"generics":["context"],"name":"result"}}],[10,"with_context","","Wraps the error type in a context type generated by looking at the error value.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["context"],"name":"result"}}],[8,"Fail","","The `Fail` trait.",null,null],[11,"cause","","Returns a reference to the underlying cause of this failure, if it is an error that wraps other errors.",6,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","Returns a reference to the `Backtrace` carried by this failure, if it carries one.",6,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"context","","Provides context for this failure.",6,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"context"}}],[11,"compat","","Wraps this failure in a compatibility wrapper that implements `std::error::Error`.",6,{"inputs":[{"name":"self"}],"output":{"name":"compat"}}],[11,"causes","","Returns a iterator over the causes of this `Fail` with itself as the first item and the `root_cause` as the final item.",6,{"inputs":[{"name":"self"}],"output":{"name":"causes"}}],[11,"root_cause","","Returns the \"root cause\" of this `Fail` - the last value in the cause chain which does not return an underlying `cause`.",6,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"downcast_ref","","Attempts to downcast this failure to a concrete type by reference.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Attempts to downcast this failure to a concrete type by mutable reference.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"root_cause","","Returns the \"root cause\" of this `Fail` - the last value in the cause chain which does not return an underlying `cause`.",6,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"causes","","Returns a iterator over the causes of this `Fail` with itself as the first item and the `root_cause` as the final item.",6,{"inputs":[{"name":"self"}],"output":{"name":"causes"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[14,"bail","","Exits a function early with an `Error`.",null,null],[14,"ensure","","Exits a function early with an `Error` if the condition is not satisfied.",null,null],[14,"format_err","","Constructs an `Error` using the standard string interpolation syntax.",null,null]],"paths":[[3,"Backtrace"],[3,"Compat"],[3,"Context"],[3,"SyncFailure"],[3,"Error"],[8,"ResultExt"],[8,"Fail"],[3,"Causes"]]};
searchIndex["jail"] = {"doc":"A rust library for FreeBSD jails.","items":[[3,"RunningJail","jail","Represents a running jail.",null,null],[12,"jid","","The `jid` of the jail",0,null],[3,"StoppedJail","","Represent a stopped jail including all information required to start it",null,null],[12,"path","","The path of root file system of the jail",1,null],[12,"name","","The jail name",1,null],[12,"hostname","","The jail hostname",1,null],[12,"params","","A hashmap of jail parameters and their values",1,null],[12,"ips","","A list of IP (v4 and v6) addresses to be assigned to this jail",1,null],[4,"JailError","","An enum for error types of the Jail.",null,null],[13,"IoError","","",2,null],[13,"JailGetError","","",2,null],[13,"JailSetError","","",2,null],[13,"JailRemoveFailed","","",2,null],[13,"PathNotGiven","","",2,null],[13,"NoSuchParameter","","",2,null],[13,"SysctlError","","",2,null],[13,"ParameterTypeError","","",2,null],[13,"ParameterStringLengthError","","",2,null],[13,"ParameterStructLengthError","","",2,null],[13,"JailMaxAfIpsFailed","","",2,null],[13,"ParameterLengthNaN","","",2,null],[13,"ParameterTypeUnsupported","","",2,null],[13,"UnexpectedParameterType","","",2,null],[12,"name","jail::JailError","",2,null],[12,"expected","","",2,null],[12,"got","","",2,null],[13,"ParameterUnpackError","jail","",2,null],[13,"SerializeFailed","","",2,null],[4,"Jail","","Represents a running or stopped jail.",null,null],[13,"Stopped","","",3,null],[13,"Running","","",3,null],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_errno","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"runningjail"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"runningjail"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"runningjail"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"runningjail"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"runningjail"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"runningjail"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"runningjail"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"runningjail"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"runningjail"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"from_jid","","Create a RunningJail instance given a `jid`.",0,{"inputs":[{"name":"i32"}],"output":{"name":"runningjail"}}],[11,"from_name","","Create a RunningJail given the jail `name`.",0,{"inputs":[{"name":"str"}],"output":{"generics":["runningjail","jailerror"],"name":"result"}}],[11,"name","","Return the jail's `name`.",0,{"inputs":[{"name":"runningjail"}],"output":{"generics":["string","jailerror"],"name":"result"}}],[11,"path","","Return the jail's `path`.",0,{"inputs":[{"name":"runningjail"}],"output":{"generics":["pathbuf","jailerror"],"name":"result"}}],[11,"hostname","","Return the jail's `name`.",0,{"inputs":[{"name":"runningjail"}],"output":{"generics":["string","jailerror"],"name":"result"}}],[11,"ips","","Get the IP addresses",0,{"inputs":[{"name":"runningjail"}],"output":{"generics":["vec","jailerror"],"name":"result"}}],[11,"param","","Return a jail parameter.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value","jailerror"],"name":"result"}}],[11,"params","","Return a HashMap of all jail parameters.",0,{"inputs":[{"name":"self"}],"output":{"generics":["hashmap","jailerror"],"name":"result"}}],[11,"param_set","","Set a jail parameter.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"value"}],"output":{"generics":["jailerror"],"name":"result"}}],[11,"kill","","Kill a running jail, consuming it.",0,{"inputs":[{"name":"runningjail"}],"output":{"generics":["jailerror"],"name":"result"}}],[11,"save","","Create a StoppedJail from a RunningJail, while not consuming the RunningJail.",0,{"inputs":[{"name":"runningjail"}],"output":{"generics":["stoppedjail","jailerror"],"name":"result"}}],[11,"stop","","Stop a jail, keeping its configuration in a StoppedJail.",0,{"inputs":[{"name":"runningjail"}],"output":{"generics":["stoppedjail","jailerror"],"name":"result"}}],[11,"restart","","Restart a jail by stopping it and starting it again",0,{"inputs":[{"name":"runningjail"}],"output":{"generics":["runningjail","jailerror"],"name":"result"}}],[11,"all","","Returns an Iterator over all running jails on this host.",0,{"inputs":[],"output":{"name":"runningjails"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"stoppedjail"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"stoppedjail"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"stoppedjail"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"stoppedjail"}}],[11,"new","","Create a new Jail instance given a path.",1,{"inputs":[{"name":"p"}],"output":{"name":"stoppedjail"}}],[11,"start","","Start the jail",1,{"inputs":[{"name":"stoppedjail"}],"output":{"generics":["runningjail","jailerror"],"name":"result"}}],[11,"name","","Set the jail name",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"hostname","","Set the jail name",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"param","","Set a jail parameter",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"value"}],"output":{"name":"self"}}],[11,"ip","","Add an IP Address",1,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"self"}}],[0,"param","","Module for inspection and manipulation of jail parameters",null,null],[4,"Type","jail::param","An enum representing the type of a parameter.",null,null],[13,"String","","",4,null],[13,"U8","","",4,null],[13,"U16","","",4,null],[13,"U32","","",4,null],[13,"U64","","",4,null],[13,"S8","","",4,null],[13,"S16","","",4,null],[13,"S32","","",4,null],[13,"S64","","",4,null],[13,"Int","","",4,null],[13,"Long","","",4,null],[13,"Uint","","",4,null],[13,"Ulong","","",4,null],[13,"Ipv4Addrs","","",4,null],[13,"Ipv6Addrs","","",4,null],[4,"Value","","An enum representing the value of a parameter.",null,null],[13,"Int","","",5,null],[13,"String","","",5,null],[13,"S64","","",5,null],[13,"Uint","","",5,null],[13,"Long","","",5,null],[13,"Ulong","","",5,null],[13,"U64","","",5,null],[13,"U8","","",5,null],[13,"U16","","",5,null],[13,"S8","","",5,null],[13,"S16","","",5,null],[13,"S32","","",5,null],[13,"U32","","",5,null],[13,"Ipv4Addrs","","Represent a list of IPv4 addresses.",5,null],[13,"Ipv6Addrs","","Represent a list of IPv6 addresses.",5,null],[5,"get","","Get a jail parameter given the jid and the parameter name.",null,{"inputs":[{"name":"i32"},{"name":"str"}],"output":{"generics":["value","jailerror"],"name":"result"}}],[5,"set","","Set a jail parameter given the jid, the parameter name and the value.",null,{"inputs":[{"name":"i32"},{"name":"str"},{"name":"value"}],"output":{"generics":["jailerror"],"name":"result"}}],[5,"get_all","","Set a jail parameter given the jid, the parameter name and the value.",null,{"inputs":[{"name":"i32"}],"output":{"generics":["hashmap","jailerror"],"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"of_param","","Get a parameter type from the name",4,{"inputs":[{"name":"str"}],"output":{"generics":["type","jailerror"],"name":"result"}}],[11,"is_string","","Check if this type is a string.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_numeric","","Check if this type is numeric",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_signed","","Check if this type is signed",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ip","","Check if this type is an IP address list",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipv4","","Check if this type is an IPv4 address list",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipv6","","Check if this type is an IPv4 address list",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",4,{"inputs":[{"name":"value"}],"output":{"name":"type"}}],[11,"into","","",4,{"inputs":[{"name":"type"}],"output":{"name":"ctltype"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"get_type","","Get the type of this value",5,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"unpack_ipv4","","Attempt to unpack the Vector of IPv4 addresses contained in this value",5,{"inputs":[{"name":"self"}],"output":{"generics":["vec","jailerror"],"name":"result"}}],[11,"unpack_ipv6","","Attempt to unpack the Vector of IPv4 addresses contained in this value",5,{"inputs":[{"name":"self"}],"output":{"generics":["vec","jailerror"],"name":"result"}}],[11,"unpack_string","","Attempt to unpack a String value contained in this parameter Value.",5,{"inputs":[{"name":"self"}],"output":{"generics":["string","jailerror"],"name":"result"}}],[11,"unpack_u64","","Attempt to unpack any unsigned integer Value into a 64 bit unsigned integer.",5,{"inputs":[{"name":"self"}],"output":{"generics":["u64","jailerror"],"name":"result"}}],[11,"unpack_i64","","Attempt to unpack any Value containing a signed integer or unsigned integer shorter than 64 bits into a 64 bit unsigned integer.",5,{"inputs":[{"name":"self"}],"output":{"generics":["i64","jailerror"],"name":"result"}}],[0,"process","jail","Jail-Specific extensions to the `std::process` module",null,null],[8,"Jailed","jail::process","Extension to the `std::process::Command` builder to run the command in a jail.",null,null],[10,"jail","","Sets the child process to be executed within a jail. This translates to calling `jail_attach` in the child process. Failure in the `jail_attach` call will cause the spawn to fail.",6,{"inputs":[{"name":"self"},{"name":"runningjail"}],"output":{"name":"command"}}],[11,"from","jail","",3,{"inputs":[{"name":"runningjail"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"stoppedjail"}],"output":{"name":"self"}}],[11,"is_started","","Check if a jail is running",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"start","","Start the Jail",3,{"inputs":[{"name":"self"}],"output":{"generics":["jailerror"],"name":"result"}}],[11,"stop","","Stop the jail",3,{"inputs":[{"name":"self"}],"output":{"generics":["jailerror"],"name":"result"}}],[11,"name","","Get the name of the Jail",3,{"inputs":[{"name":"self"}],"output":{"generics":["string","jailerror"],"name":"result"}}],[11,"path","","Get the name of the Jail",3,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf","jailerror"],"name":"result"}}],[11,"hostname","","Get the hostname of the Jail",3,{"inputs":[{"name":"self"}],"output":{"generics":["string","jailerror"],"name":"result"}}],[11,"ips","","Get the IP Addresses of a jail",3,{"inputs":[{"name":"self"}],"output":{"generics":["vec","jailerror"],"name":"result"}}],[11,"param","","Get a jail parameter",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["value","jailerror"],"name":"result"}}],[11,"params","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["hashmap","jailerror"],"name":"result"}}]],"paths":[[3,"RunningJail"],[3,"StoppedJail"],[4,"JailError"],[4,"Jail"],[4,"Type"],[4,"Value"],[8,"Jailed"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",20,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",21,null],[12,"sin6_family","","",21,null],[12,"sin6_port","","",21,null],[12,"sin6_flowinfo","","",21,null],[12,"sin6_addr","","",21,null],[12,"sin6_scope_id","","",21,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",22,null],[12,"sun_family","","",22,null],[12,"sun_path","","",22,null],[3,"passwd","","",null,null],[12,"pw_name","","",23,null],[12,"pw_passwd","","",23,null],[12,"pw_uid","","",23,null],[12,"pw_gid","","",23,null],[12,"pw_change","","",23,null],[12,"pw_class","","",23,null],[12,"pw_gecos","","",23,null],[12,"pw_dir","","",23,null],[12,"pw_shell","","",23,null],[12,"pw_expire","","",23,null],[12,"pw_fields","","",23,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",24,null],[12,"ifa_name","","",24,null],[12,"ifa_flags","","",24,null],[12,"ifa_addr","","",24,null],[12,"ifa_netmask","","",24,null],[12,"ifa_dstaddr","","",24,null],[12,"ifa_data","","",24,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",25,null],[12,"tm_min","","",25,null],[12,"tm_hour","","",25,null],[12,"tm_mday","","",25,null],[12,"tm_mon","","",25,null],[12,"tm_year","","",25,null],[12,"tm_wday","","",25,null],[12,"tm_yday","","",25,null],[12,"tm_isdst","","",25,null],[12,"tm_gmtoff","","",25,null],[12,"tm_zone","","",25,null],[3,"utsname","","",null,null],[12,"sysname","","",26,null],[12,"nodename","","",26,null],[12,"release","","",26,null],[12,"version","","",26,null],[12,"machine","","",26,null],[3,"msghdr","","",null,null],[12,"msg_name","","",27,null],[12,"msg_namelen","","",27,null],[12,"msg_iov","","",27,null],[12,"msg_iovlen","","",27,null],[12,"msg_control","","",27,null],[12,"msg_controllen","","",27,null],[12,"msg_flags","","",27,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",28,null],[12,"cmsg_level","","",28,null],[12,"cmsg_type","","",28,null],[3,"fsid_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",29,null],[12,"if_name","","",29,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",30,null],[12,"gl_matchc","","",30,null],[12,"gl_offs","","",30,null],[12,"gl_flags","","",30,null],[12,"gl_pathv","","",30,null],[3,"kevent","","",null,null],[12,"ident","","",31,null],[12,"filter","","",31,null],[12,"flags","","",31,null],[12,"fflags","","",31,null],[12,"data","","",31,null],[12,"udata","","",31,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",32,null],[12,"ss_family","","",32,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",33,null],[12,"ai_family","","",33,null],[12,"ai_socktype","","",33,null],[12,"ai_protocol","","",33,null],[12,"ai_addrlen","","",33,null],[12,"ai_canonname","","",33,null],[12,"ai_addr","","",33,null],[12,"ai_next","","",33,null],[3,"sigset_t","","",null,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",34,null],[12,"si_errno","","",34,null],[12,"si_code","","",34,null],[12,"si_pid","","",34,null],[12,"si_uid","","",34,null],[12,"si_status","","",34,null],[12,"si_addr","","",34,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",35,null],[12,"sa_flags","","",35,null],[12,"sa_mask","","",35,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",36,null],[12,"ss_size","","",36,null],[12,"ss_flags","","",36,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",37,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",38,null],[12,"dli_fbase","","",38,null],[12,"dli_sname","","",38,null],[12,"dli_saddr","","",38,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",39,null],[12,"sin_family","","",39,null],[12,"sin_port","","",39,null],[12,"sin_addr","","",39,null],[12,"sin_zero","","",39,null],[3,"termios","","",null,null],[12,"c_iflag","","",40,null],[12,"c_oflag","","",40,null],[12,"c_cflag","","",40,null],[12,"c_lflag","","",40,null],[12,"c_cc","","",40,null],[12,"c_ispeed","","",40,null],[12,"c_ospeed","","",40,null],[3,"flock","","",null,null],[12,"l_start","","",41,null],[12,"l_len","","",41,null],[12,"l_pid","","",41,null],[12,"l_type","","",41,null],[12,"l_whence","","",41,null],[12,"l_sysid","","",41,null],[3,"sf_hdtr","","",null,null],[12,"headers","","",42,null],[12,"hdr_cnt","","",42,null],[12,"trailers","","",42,null],[12,"trl_cnt","","",42,null],[3,"lconv","","",null,null],[12,"decimal_point","","",43,null],[12,"thousands_sep","","",43,null],[12,"grouping","","",43,null],[12,"int_curr_symbol","","",43,null],[12,"currency_symbol","","",43,null],[12,"mon_decimal_point","","",43,null],[12,"mon_thousands_sep","","",43,null],[12,"mon_grouping","","",43,null],[12,"positive_sign","","",43,null],[12,"negative_sign","","",43,null],[12,"int_frac_digits","","",43,null],[12,"frac_digits","","",43,null],[12,"p_cs_precedes","","",43,null],[12,"p_sep_by_space","","",43,null],[12,"n_cs_precedes","","",43,null],[12,"n_sep_by_space","","",43,null],[12,"p_sign_posn","","",43,null],[12,"n_sign_posn","","",43,null],[12,"int_p_cs_precedes","","",43,null],[12,"int_n_cs_precedes","","",43,null],[12,"int_p_sep_by_space","","",43,null],[12,"int_n_sep_by_space","","",43,null],[12,"int_p_sign_posn","","",43,null],[12,"int_n_sign_posn","","",43,null],[3,"cmsgcred","","",null,null],[12,"cmcred_pid","","",44,null],[12,"cmcred_uid","","",44,null],[12,"cmcred_euid","","",44,null],[12,"cmcred_gid","","",44,null],[12,"cmcred_ngroups","","",44,null],[12,"cmcred_groups","","",44,null],[3,"rtprio","","",null,null],[12,"type_","","",45,null],[12,"prio","","",45,null],[3,"in6_pktinfo","","",null,null],[12,"ipi6_addr","","",46,null],[12,"ipi6_ifindex","","",46,null],[3,"utmpx","","",null,null],[12,"ut_type","","",47,null],[12,"ut_tv","","",47,null],[12,"ut_id","","",47,null],[12,"ut_pid","","",47,null],[12,"ut_user","","",47,null],[12,"ut_line","","",47,null],[12,"ut_host","","",47,null],[12,"__ut_spare","","",47,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",48,null],[12,"aio_offset","","",48,null],[12,"aio_buf","","",48,null],[12,"aio_nbytes","","",48,null],[12,"aio_lio_opcode","","",48,null],[12,"aio_reqprio","","",48,null],[12,"aio_sigevent","","",48,null],[3,"dirent","","",null,null],[12,"d_fileno","","",49,null],[12,"d_reclen","","",49,null],[12,"d_type","","",49,null],[12,"d_namlen","","",49,null],[12,"d_name","","",49,null],[3,"jail","","",null,null],[12,"version","","",50,null],[12,"path","","",50,null],[12,"hostname","","",50,null],[12,"jailname","","",50,null],[12,"ip4s","","",50,null],[12,"ip6s","","",50,null],[12,"ip4","","",50,null],[12,"ip6","","",50,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",51,null],[12,"mq_maxmsg","","",51,null],[12,"mq_msgsize","","",51,null],[12,"mq_curmsgs","","",51,null],[3,"sigevent","","",null,null],[12,"sigev_notify","","",52,null],[12,"sigev_signo","","",52,null],[12,"sigev_value","","",52,null],[12,"sigev_notify_thread_id","","",52,null],[3,"statvfs","","",null,null],[12,"f_bavail","","",53,null],[12,"f_bfree","","",53,null],[12,"f_blocks","","",53,null],[12,"f_favail","","",53,null],[12,"f_ffree","","",53,null],[12,"f_files","","",53,null],[12,"f_bsize","","",53,null],[12,"f_flag","","",53,null],[12,"f_frsize","","",53,null],[12,"f_fsid","","",53,null],[12,"f_namemax","","",53,null],[3,"_sem","","",null,null],[3,"ipc_perm","","",null,null],[12,"cuid","","",54,null],[12,"cgid","","",54,null],[12,"uid","","",54,null],[12,"gid","","",54,null],[12,"mode","","",54,null],[12,"seq","","",54,null],[12,"key","","",54,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",55,null],[12,"msg_cbytes","","",55,null],[12,"msg_qnum","","",55,null],[12,"msg_qbytes","","",55,null],[12,"msg_lspid","","",55,null],[12,"msg_lrpid","","",55,null],[12,"msg_stime","","",55,null],[12,"msg_rtime","","",55,null],[12,"msg_ctime","","",55,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",56,null],[12,"shm_segsz","","",56,null],[12,"shm_lpid","","",56,null],[12,"shm_cpid","","",56,null],[12,"shm_nattch","","",56,null],[12,"shm_atime","","",56,null],[12,"shm_dtime","","",56,null],[12,"shm_ctime","","",56,null],[3,"xucred","","",null,null],[12,"cr_version","","",57,null],[12,"cr_uid","","",57,null],[12,"cr_ngroups","","",57,null],[12,"cr_groups","","",57,null],[3,"sockaddr_dl","","",null,null],[12,"sdl_len","","",58,null],[12,"sdl_family","","",58,null],[12,"sdl_index","","",58,null],[12,"sdl_type","","",58,null],[12,"sdl_nlen","","",58,null],[12,"sdl_alen","","",58,null],[12,"sdl_slen","","",58,null],[12,"sdl_data","","",58,null],[3,"stat","","",null,null],[12,"st_dev","","",59,null],[12,"st_ino","","",59,null],[12,"st_mode","","",59,null],[12,"st_nlink","","",59,null],[12,"st_uid","","",59,null],[12,"st_gid","","",59,null],[12,"st_rdev","","",59,null],[12,"st_atime","","",59,null],[12,"st_atime_nsec","","",59,null],[12,"st_mtime","","",59,null],[12,"st_mtime_nsec","","",59,null],[12,"st_ctime","","",59,null],[12,"st_ctime_nsec","","",59,null],[12,"st_size","","",59,null],[12,"st_blocks","","",59,null],[12,"st_blksize","","",59,null],[12,"st_flags","","",59,null],[12,"st_gen","","",59,null],[12,"st_lspare","","",59,null],[12,"st_birthtime","","",59,null],[12,"st_birthtime_nsec","","",59,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"killpg","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"setgroups","","",null,null],[5,"ioctl","","",null,null],[5,"kqueue","","",null,null],[5,"unmount","","",null,null],[5,"syscall","","",null,null],[5,"getpwent","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"setgrent","","",null,null],[5,"endgrent","","",null,null],[5,"getgrent","","",null,null],[5,"getprogname","","",null,null],[5,"setprogname","","",null,null],[5,"getloadavg","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"getpeereid","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"sync","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"lutimes","","",null,null],[5,"endutxent","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"getgrouplist","","",null,null],[5,"initgroups","","",null,null],[5,"getpwent_r","","",null,null],[5,"getgrent_r","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_notify","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_setattr","","",null,null],[5,"mq_timedreceive","","",null,null],[5,"mq_timedsend","","",null,null],[5,"mq_unlink","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"dirfd","","",null,null],[5,"getnameinfo","","",null,null],[5,"kevent","","",null,null],[5,"mincore","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"sysctlnametomib","","",null,null],[5,"shm_open","","",null,null],[5,"sysctl","","",null,null],[5,"sysctlbyname","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"memrchr","","",null,null],[5,"sendfile","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"duplocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"querylocale","","",null,null],[5,"accept4","","",null,null],[5,"pthread_set_name_np","","",null,null],[5,"pthread_attr_get_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"rtprio","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"mkfifoat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"sethostname","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sem_getvalue","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"pipe2","","",null,null],[5,"ppoll","","",null,null],[5,"settimeofday","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"__error","","",null,null],[5,"mprotect","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"jail","","",null,null],[5,"jail_attach","","",null,null],[5,"jail_remove","","",null,null],[5,"jail_get","","",null,null],[5,"jail_set","","",null,null],[5,"fdatasync","","",null,null],[5,"posix_fallocate","","",null,null],[5,"posix_fadvise","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"getutxuser","","",null,null],[5,"setutxdb","","",null,null],[5,"aio_waitcomplete","","",null,null],[5,"freelocale","","",null,null],[5,"waitid","","",null,null],[5,"ftok","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"cfmakesane","","",null,null],[5,"fexecve","","",null,null],[5,"pdfork","","",null,null],[5,"pdgetpid","","",null,null],[5,"pdkill","","",null,null],[5,"rtprio_thread","","",null,null],[5,"posix_spawn","","",null,null],[5,"posix_spawnp","","",null,null],[5,"posix_spawnattr_init","","",null,null],[5,"posix_spawnattr_destroy","","",null,null],[5,"posix_spawnattr_getsigdefault","","",null,null],[5,"posix_spawnattr_setsigdefault","","",null,null],[5,"posix_spawnattr_getsigmask","","",null,null],[5,"posix_spawnattr_setsigmask","","",null,null],[5,"posix_spawnattr_getflags","","",null,null],[5,"posix_spawnattr_setflags","","",null,null],[5,"posix_spawnattr_getpgroup","","",null,null],[5,"posix_spawnattr_setpgroup","","",null,null],[5,"posix_spawnattr_getschedpolicy","","",null,null],[5,"posix_spawnattr_setschedpolicy","","",null,null],[5,"posix_spawnattr_getschedparam","","",null,null],[5,"posix_spawnattr_setschedparam","","",null,null],[5,"posix_spawn_file_actions_init","","",null,null],[5,"posix_spawn_file_actions_destroy","","",null,null],[5,"posix_spawn_file_actions_addopen","","",null,null],[5,"posix_spawn_file_actions_addclose","","",null,null],[5,"posix_spawn_file_actions_adddup2","","",null,null],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"jail"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"_sem"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"xucred"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_dl"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"kevent"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"sf_hdtr"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"cmsgcred"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"rtprio"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"in6_pktinfo"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"servent"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"wchar_t","","",null,null],[6,"off_t","","",null,null],[6,"useconds_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_t","","",null,null],[6,"nfds_t","","",null,null],[6,"c_char","","",null,null],[6,"dev_t","","",null,null],[6,"mode_t","","",null,null],[6,"pthread_attr_t","","",null,null],[6,"rlim_t","","",null,null],[6,"mqd_t","","",null,null],[6,"pthread_mutex_t","","",null,null],[6,"pthread_mutexattr_t","","",null,null],[6,"pthread_cond_t","","",null,null],[6,"pthread_condattr_t","","",null,null],[6,"pthread_rwlock_t","","",null,null],[6,"pthread_rwlockattr_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"speed_t","","",null,null],[6,"nl_item","","",null,null],[6,"id_t","","",null,null],[6,"fflags_t","","",null,null],[6,"clock_t","","",null,null],[6,"ino_t","","",null,null],[6,"lwpid_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"clockid_t","","",null,null],[6,"sem_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"idtype_t","","",null,null],[6,"key_t","","",null,null],[6,"msglen_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"posix_spawnattr_t","","",null,null],[6,"posix_spawn_file_actions_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[17,"INT_MIN","","",null,null],[17,"INT_MAX","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_UNKNOWN","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PATH_MAX","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGINFO","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IPV6_UNICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_IF","","",null,null],[17,"IPV6_MULTICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"NCCS","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_SHLOCK","","",null,null],[17,"O_EXLOCK","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VDSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"VSTATUS","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"OXTABS","","",null,null],[17,"ONOEOT","","",null,null],[17,"CIGNORE","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"ALTWERASE","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"NOKERNINFO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"MDMBUF","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_SELF","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"AIO_LISTIO_MAX","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"SIGEV_KEVENT","","",null,null],[17,"CODESET","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"D_MD_ORDER","","",null,null],[17,"ALTMON_1","","",null,null],[17,"ALTMON_2","","",null,null],[17,"ALTMON_3","","",null,null],[17,"ALTMON_4","","",null,null],[17,"ALTMON_5","","",null,null],[17,"ALTMON_6","","",null,null],[17,"ALTMON_7","","",null,null],[17,"ALTMON_8","","",null,null],[17,"ALTMON_9","","",null,null],[17,"ALTMON_10","","",null,null],[17,"ALTMON_11","","",null,null],[17,"ALTMON_12","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_DIRECT","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGEMT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EAGAIN","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"EALREADY","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"ELOOP","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"EPROCLIM","","",null,null],[17,"EUSERS","","",null,null],[17,"EDQUOT","","",null,null],[17,"ESTALE","","",null,null],[17,"EREMOTE","","",null,null],[17,"EBADRPC","","",null,null],[17,"ERPCMISMATCH","","",null,null],[17,"EPROGUNAVAIL","","",null,null],[17,"EPROGMISMATCH","","",null,null],[17,"EPROCUNAVAIL","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"EFTYPE","","",null,null],[17,"EAUTH","","",null,null],[17,"ENEEDAUTH","","",null,null],[17,"EIDRM","","",null,null],[17,"ENOMSG","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ECANCELED","","",null,null],[17,"EILSEQ","","",null,null],[17,"ENOATTR","","",null,null],[17,"EDOOFUS","","",null,null],[17,"EBADMSG","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"ENOLINK","","",null,null],[17,"EPROTO","","",null,null],[17,"POLLSTANDARD","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"SIGTRAP","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_SBSIZE","","",null,null],[17,"RLIMIT_VMEM","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_NOSYNC","","",null,null],[17,"MADV_AUTOSYNC","","",null,null],[17,"MADV_NOCORE","","",null,null],[17,"MADV_CORE","","",null,null],[17,"MINCORE_INCORE","","",null,null],[17,"MINCORE_REFERENCED","","",null,null],[17,"MINCORE_MODIFIED","","",null,null],[17,"MINCORE_REFERENCED_OTHER","","",null,null],[17,"MINCORE_MODIFIED_OTHER","","",null,null],[17,"MINCORE_SUPER","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_IMPLINK","","",null,null],[17,"AF_PUP","","",null,null],[17,"AF_CHAOS","","",null,null],[17,"AF_NETBIOS","","",null,null],[17,"AF_ISO","","",null,null],[17,"AF_OSI","","",null,null],[17,"AF_ECMA","","",null,null],[17,"AF_DATAKIT","","",null,null],[17,"AF_CCITT","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_DLI","","",null,null],[17,"AF_LAT","","",null,null],[17,"AF_HYLINK","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_LINK","","",null,null],[17,"pseudo_AF_XTP","","",null,null],[17,"AF_COIP","","",null,null],[17,"AF_CNT","","",null,null],[17,"pseudo_AF_RTIP","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_SIP","","",null,null],[17,"pseudo_AF_PIP","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_E164","","",null,null],[17,"pseudo_AF_KEY","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_NATM","","",null,null],[17,"AF_ATM","","",null,null],[17,"pseudo_AF_HDRCMPLT","","",null,null],[17,"AF_NETGRAPH","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_IMPLINK","","",null,null],[17,"PF_PUP","","",null,null],[17,"PF_CHAOS","","",null,null],[17,"PF_NETBIOS","","",null,null],[17,"PF_ISO","","",null,null],[17,"PF_OSI","","",null,null],[17,"PF_ECMA","","",null,null],[17,"PF_DATAKIT","","",null,null],[17,"PF_CCITT","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_DLI","","",null,null],[17,"PF_LAT","","",null,null],[17,"PF_HYLINK","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_LINK","","",null,null],[17,"PF_XTP","","",null,null],[17,"PF_COIP","","",null,null],[17,"PF_CNT","","",null,null],[17,"PF_SIP","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_RTIP","","",null,null],[17,"PF_PIP","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_NATM","","",null,null],[17,"PF_ATM","","",null,null],[17,"PF_NETGRAPH","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOF","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOCK_MAXADDRLEN","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_RECVDSTADDR","","",null,null],[17,"IP_SENDSRCADDR","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_JOIN_GROUP","","",null,null],[17,"IPV6_LEAVE_GROUP","","",null,null],[17,"IPV6_RECVPKTINFO","","",null,null],[17,"IPV6_PKTINFO","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_USELOOPBACK","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_NOSIGPIPE","","",null,null],[17,"SO_ACCEPTFILTER","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"MAP_COPY","","",null,null],[17,"MAP_RENAME","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_HASSEMAPHORE","","",null,null],[17,"MAP_STACK","","",null,null],[17,"MAP_NOSYNC","","",null,null],[17,"MAP_NOCORE","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_MIN_HOLE_SIZE","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ACL_EXTENDED","","",null,null],[17,"_PC_ACL_PATH_MAX","","",null,null],[17,"_PC_CAP_PRESENT","","",null,null],[17,"_PC_INF_PRESENT","","",null,null],[17,"_PC_MAC_PRESENT","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_RR","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"LOG_NTP","","",null,null],[17,"LOG_SECURITY","","",null,null],[17,"LOG_CONSOLE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCFLUSH","","",null,null],[17,"TIOCGETA","","",null,null],[17,"TIOCSETA","","",null,null],[17,"TIOCSETAW","","",null,null],[17,"TIOCSETAF","","",null,null],[17,"TIOCGETD","","",null,null],[17,"TIOCSETD","","",null,null],[17,"TIOCGDRAINWAIT","","",null,null],[17,"TIOCSDRAINWAIT","","",null,null],[17,"TIOCTIMESTAMP","","",null,null],[17,"TIOCMGDTRWAIT","","",null,null],[17,"TIOCMSDTRWAIT","","",null,null],[17,"TIOCDRAIN","","",null,null],[17,"TIOCEXT","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCCONS","","",null,null],[17,"TIOCGSID","","",null,null],[17,"TIOCSTAT","","",null,null],[17,"TIOCUCNTL","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCSTART","","",null,null],[17,"TIOCSTOP","","",null,null],[17,"TIOCPKT","","",null,null],[17,"TIOCPKT_DATA","","",null,null],[17,"TIOCPKT_FLUSHREAD","","",null,null],[17,"TIOCPKT_FLUSHWRITE","","",null,null],[17,"TIOCPKT_STOP","","",null,null],[17,"TIOCPKT_START","","",null,null],[17,"TIOCPKT_NOSTOP","","",null,null],[17,"TIOCPKT_DOSTOP","","",null,null],[17,"TIOCPKT_IOCTL","","",null,null],[17,"TIOCNOTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCCDTR","","",null,null],[17,"TIOCSDTR","","",null,null],[17,"TIOCCBRK","","",null,null],[17,"TIOCSBRK","","",null,null],[17,"TTYDISC","","",null,null],[17,"SLIPDISC","","",null,null],[17,"PPPDISC","","",null,null],[17,"NETGRAPHDISC","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"B7200","","",null,null],[17,"B14400","","",null,null],[17,"B28800","","",null,null],[17,"B57600","","",null,null],[17,"B76800","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"CRTSCTS","","",null,null],[17,"CCTS_OFLOW","","",null,null],[17,"CRTS_IFLOW","","",null,null],[17,"CDTR_IFLOW","","",null,null],[17,"CDSR_OFLOW","","",null,null],[17,"CCAR_OFLOW","","",null,null],[17,"VERASE2","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"CMGROUP_MAX","","",null,null],[17,"BPF_ALIGNMENT","","",null,null],[17,"RTP_PRIO_MIN","","",null,null],[17,"RTP_PRIO_MAX","","",null,null],[17,"RTP_LOOKUP","","",null,null],[17,"RTP_SET","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"RAND_MAX","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"PTHREAD_MUTEX_ADAPTIVE_NP","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SF_NODISKIO","","",null,null],[17,"SF_MNOWAIT","","",null,null],[17,"SF_SYNC","","",null,null],[17,"SF_USER_READAHEAD","","",null,null],[17,"SF_NOCACHE","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_EXEC","","",null,null],[17,"O_TTY_INIT","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"ENOTCAPABLE","","",null,null],[17,"ECAPMODE","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ELAST","","",null,null],[17,"RLIMIT_NPTS","","",null,null],[17,"RLIMIT_SWAP","","",null,null],[17,"RLIMIT_KQUEUES","","",null,null],[17,"RLIMIT_UMTXP","","",null,null],[17,"RLIM_NLIMITS","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POLLINIGNEOF","","",null,null],[17,"EVFILT_READ","","",null,null],[17,"EVFILT_WRITE","","",null,null],[17,"EVFILT_AIO","","",null,null],[17,"EVFILT_VNODE","","",null,null],[17,"EVFILT_PROC","","",null,null],[17,"EVFILT_SIGNAL","","",null,null],[17,"EVFILT_TIMER","","",null,null],[17,"EVFILT_PROCDESC","","",null,null],[17,"EVFILT_FS","","",null,null],[17,"EVFILT_LIO","","",null,null],[17,"EVFILT_USER","","",null,null],[17,"EVFILT_SENDFILE","","",null,null],[17,"EVFILT_EMPTY","","",null,null],[17,"EV_ADD","","",null,null],[17,"EV_DELETE","","",null,null],[17,"EV_ENABLE","","",null,null],[17,"EV_DISABLE","","",null,null],[17,"EV_ONESHOT","","",null,null],[17,"EV_CLEAR","","",null,null],[17,"EV_RECEIPT","","",null,null],[17,"EV_DISPATCH","","",null,null],[17,"EV_DROP","","",null,null],[17,"EV_FLAG1","","",null,null],[17,"EV_ERROR","","",null,null],[17,"EV_EOF","","",null,null],[17,"EV_SYSFLAGS","","",null,null],[17,"NOTE_TRIGGER","","",null,null],[17,"NOTE_FFNOP","","",null,null],[17,"NOTE_FFAND","","",null,null],[17,"NOTE_FFOR","","",null,null],[17,"NOTE_FFCOPY","","",null,null],[17,"NOTE_FFCTRLMASK","","",null,null],[17,"NOTE_FFLAGSMASK","","",null,null],[17,"NOTE_LOWAT","","",null,null],[17,"NOTE_DELETE","","",null,null],[17,"NOTE_WRITE","","",null,null],[17,"NOTE_EXTEND","","",null,null],[17,"NOTE_ATTRIB","","",null,null],[17,"NOTE_LINK","","",null,null],[17,"NOTE_RENAME","","",null,null],[17,"NOTE_REVOKE","","",null,null],[17,"NOTE_EXIT","","",null,null],[17,"NOTE_FORK","","",null,null],[17,"NOTE_EXEC","","",null,null],[17,"NOTE_PDATAMASK","","",null,null],[17,"NOTE_PCTRLMASK","","",null,null],[17,"NOTE_TRACK","","",null,null],[17,"NOTE_TRACKERR","","",null,null],[17,"NOTE_CHILD","","",null,null],[17,"NOTE_SECONDS","","",null,null],[17,"NOTE_MSECONDS","","",null,null],[17,"NOTE_USECONDS","","",null,null],[17,"NOTE_NSECONDS","","",null,null],[17,"MADV_PROTECT","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_VIRTUAL","","",null,null],[17,"CLOCK_PROF","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_UPTIME","","",null,null],[17,"CLOCK_UPTIME_PRECISE","","",null,null],[17,"CLOCK_UPTIME_FAST","","",null,null],[17,"CLOCK_REALTIME_PRECISE","","",null,null],[17,"CLOCK_REALTIME_FAST","","",null,null],[17,"CLOCK_MONOTONIC_PRECISE","","",null,null],[17,"CLOCK_MONOTONIC_FAST","","",null,null],[17,"CLOCK_SECOND","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CTL_UNSPEC","","",null,null],[17,"CTL_KERN","","",null,null],[17,"CTL_VM","","",null,null],[17,"CTL_VFS","","",null,null],[17,"CTL_NET","","",null,null],[17,"CTL_DEBUG","","",null,null],[17,"CTL_HW","","",null,null],[17,"CTL_MACHDEP","","",null,null],[17,"CTL_USER","","",null,null],[17,"CTL_P1003_1B","","",null,null],[17,"KERN_OSTYPE","","",null,null],[17,"KERN_OSRELEASE","","",null,null],[17,"KERN_OSREV","","",null,null],[17,"KERN_VERSION","","",null,null],[17,"KERN_MAXVNODES","","",null,null],[17,"KERN_MAXPROC","","",null,null],[17,"KERN_MAXFILES","","",null,null],[17,"KERN_ARGMAX","","",null,null],[17,"KERN_SECURELVL","","",null,null],[17,"KERN_HOSTNAME","","",null,null],[17,"KERN_HOSTID","","",null,null],[17,"KERN_CLOCKRATE","","",null,null],[17,"KERN_VNODE","","",null,null],[17,"KERN_PROC","","",null,null],[17,"KERN_FILE","","",null,null],[17,"KERN_PROF","","",null,null],[17,"KERN_POSIX1","","",null,null],[17,"KERN_NGROUPS","","",null,null],[17,"KERN_JOB_CONTROL","","",null,null],[17,"KERN_SAVED_IDS","","",null,null],[17,"KERN_BOOTTIME","","",null,null],[17,"KERN_NISDOMAINNAME","","",null,null],[17,"KERN_UPDATEINTERVAL","","",null,null],[17,"KERN_OSRELDATE","","",null,null],[17,"KERN_NTP_PLL","","",null,null],[17,"KERN_BOOTFILE","","",null,null],[17,"KERN_MAXFILESPERPROC","","",null,null],[17,"KERN_MAXPROCPERUID","","",null,null],[17,"KERN_DUMPDEV","","",null,null],[17,"KERN_IPC","","",null,null],[17,"KERN_DUMMY","","",null,null],[17,"KERN_PS_STRINGS","","",null,null],[17,"KERN_USRSTACK","","",null,null],[17,"KERN_LOGSIGEXIT","","",null,null],[17,"KERN_IOV_MAX","","",null,null],[17,"KERN_HOSTUUID","","",null,null],[17,"KERN_ARND","","",null,null],[17,"KERN_PROC_ALL","","",null,null],[17,"KERN_PROC_PID","","",null,null],[17,"KERN_PROC_PGRP","","",null,null],[17,"KERN_PROC_SESSION","","",null,null],[17,"KERN_PROC_TTY","","",null,null],[17,"KERN_PROC_UID","","",null,null],[17,"KERN_PROC_RUID","","",null,null],[17,"KERN_PROC_ARGS","","",null,null],[17,"KERN_PROC_PROC","","",null,null],[17,"KERN_PROC_SV_NAME","","",null,null],[17,"KERN_PROC_RGID","","",null,null],[17,"KERN_PROC_GID","","",null,null],[17,"KERN_PROC_PATHNAME","","",null,null],[17,"KERN_PROC_OVMMAP","","",null,null],[17,"KERN_PROC_OFILEDESC","","",null,null],[17,"KERN_PROC_KSTACK","","",null,null],[17,"KERN_PROC_INC_THREAD","","",null,null],[17,"KERN_PROC_VMMAP","","",null,null],[17,"KERN_PROC_FILEDESC","","",null,null],[17,"KERN_PROC_GROUPS","","",null,null],[17,"KERN_PROC_ENV","","",null,null],[17,"KERN_PROC_AUXV","","",null,null],[17,"KERN_PROC_RLIMIT","","",null,null],[17,"KERN_PROC_PS_STRINGS","","",null,null],[17,"KERN_PROC_UMASK","","",null,null],[17,"KERN_PROC_OSREL","","",null,null],[17,"KERN_PROC_SIGTRAMP","","",null,null],[17,"KIPC_MAXSOCKBUF","","",null,null],[17,"KIPC_SOCKBUF_WASTE","","",null,null],[17,"KIPC_SOMAXCONN","","",null,null],[17,"KIPC_MAX_LINKHDR","","",null,null],[17,"KIPC_MAX_PROTOHDR","","",null,null],[17,"KIPC_MAX_HDR","","",null,null],[17,"KIPC_MAX_DATALEN","","",null,null],[17,"HW_MACHINE","","",null,null],[17,"HW_MODEL","","",null,null],[17,"HW_NCPU","","",null,null],[17,"HW_BYTEORDER","","",null,null],[17,"HW_PHYSMEM","","",null,null],[17,"HW_USERMEM","","",null,null],[17,"HW_PAGESIZE","","",null,null],[17,"HW_DISKNAMES","","",null,null],[17,"HW_DISKSTATS","","",null,null],[17,"HW_FLOATINGPT","","",null,null],[17,"HW_MACHINE_ARCH","","",null,null],[17,"HW_REALMEM","","",null,null],[17,"USER_CS_PATH","","",null,null],[17,"USER_BC_BASE_MAX","","",null,null],[17,"USER_BC_DIM_MAX","","",null,null],[17,"USER_BC_SCALE_MAX","","",null,null],[17,"USER_BC_STRING_MAX","","",null,null],[17,"USER_COLL_WEIGHTS_MAX","","",null,null],[17,"USER_EXPR_NEST_MAX","","",null,null],[17,"USER_LINE_MAX","","",null,null],[17,"USER_RE_DUP_MAX","","",null,null],[17,"USER_POSIX2_VERSION","","",null,null],[17,"USER_POSIX2_C_BIND","","",null,null],[17,"USER_POSIX2_C_DEV","","",null,null],[17,"USER_POSIX2_CHAR_TERM","","",null,null],[17,"USER_POSIX2_FORT_DEV","","",null,null],[17,"USER_POSIX2_FORT_RUN","","",null,null],[17,"USER_POSIX2_LOCALEDEF","","",null,null],[17,"USER_POSIX2_SW_DEV","","",null,null],[17,"USER_POSIX2_UPE","","",null,null],[17,"USER_STREAM_MAX","","",null,null],[17,"USER_TZNAME_MAX","","",null,null],[17,"CTL_P1003_1B_ASYNCHRONOUS_IO","","",null,null],[17,"CTL_P1003_1B_MAPPED_FILES","","",null,null],[17,"CTL_P1003_1B_MEMLOCK","","",null,null],[17,"CTL_P1003_1B_MEMLOCK_RANGE","","",null,null],[17,"CTL_P1003_1B_MEMORY_PROTECTION","","",null,null],[17,"CTL_P1003_1B_MESSAGE_PASSING","","",null,null],[17,"CTL_P1003_1B_PRIORITIZED_IO","","",null,null],[17,"CTL_P1003_1B_PRIORITY_SCHEDULING","","",null,null],[17,"CTL_P1003_1B_REALTIME_SIGNALS","","",null,null],[17,"CTL_P1003_1B_SEMAPHORES","","",null,null],[17,"CTL_P1003_1B_FSYNC","","",null,null],[17,"CTL_P1003_1B_SHARED_MEMORY_OBJECTS","","",null,null],[17,"CTL_P1003_1B_SYNCHRONIZED_IO","","",null,null],[17,"CTL_P1003_1B_TIMERS","","",null,null],[17,"CTL_P1003_1B_AIO_LISTIO_MAX","","",null,null],[17,"CTL_P1003_1B_AIO_MAX","","",null,null],[17,"CTL_P1003_1B_AIO_PRIO_DELTA_MAX","","",null,null],[17,"CTL_P1003_1B_DELAYTIMER_MAX","","",null,null],[17,"CTL_P1003_1B_MQ_OPEN_MAX","","",null,null],[17,"CTL_P1003_1B_PAGESIZE","","",null,null],[17,"CTL_P1003_1B_RTSIG_MAX","","",null,null],[17,"CTL_P1003_1B_SEM_NSEMS_MAX","","",null,null],[17,"CTL_P1003_1B_SEM_VALUE_MAX","","",null,null],[17,"CTL_P1003_1B_SIGQUEUE_MAX","","",null,null],[17,"CTL_P1003_1B_TIMER_MAX","","",null,null],[17,"TIOCGPTN","","",null,null],[17,"TIOCPTMASTER","","",null,null],[17,"TIOCSIG","","",null,null],[17,"TIOCM_DCD","","",null,null],[17,"H4DISC","","",null,null],[17,"JAIL_API_VERSION","","",null,null],[17,"JAIL_CREATE","","",null,null],[17,"JAIL_UPDATE","","",null,null],[17,"JAIL_ATTACH","","",null,null],[17,"JAIL_DYING","","",null,null],[17,"JAIL_SET_MASK","","",null,null],[17,"JAIL_GET_MASK","","",null,null],[17,"JAIL_SYS_DISABLE","","",null,null],[17,"JAIL_SYS_NEW","","",null,null],[17,"JAIL_SYS_INHERIT","","",null,null],[17,"SO_BINTIME","","",null,null],[17,"SO_NO_OFFLOAD","","",null,null],[17,"SO_NO_DDP","","",null,null],[17,"SO_LABEL","","",null,null],[17,"SO_PEERLABEL","","",null,null],[17,"SO_LISTENQLIMIT","","",null,null],[17,"SO_LISTENQLEN","","",null,null],[17,"SO_LISTENINCQLEN","","",null,null],[17,"SO_SETFIB","","",null,null],[17,"SO_USER_COOKIE","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_PROTOTYPE","","",null,null],[17,"SO_VENDOR","","",null,null],[17,"LOCAL_PEERCRED","","",null,null],[17,"LOCAL_CREDS","","",null,null],[17,"LOCAL_CONNWAIT","","",null,null],[17,"LOCAL_VENDOR","","",null,null],[17,"AF_SLOW","","",null,null],[17,"AF_SCLUSTER","","",null,null],[17,"AF_ARP","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IEEE80211","","",null,null],[17,"AF_INET_SDP","","",null,null],[17,"AF_INET6_SDP","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_OACTIVE","","",null,null],[17,"IFF_SIMPLEX","","",null,null],[17,"IFF_LINK0","","",null,null],[17,"IFF_LINK1","","",null,null],[17,"IFF_LINK2","","",null,null],[17,"IFF_ALTPHYS","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_CANTCONFIG","","",null,null],[17,"IFF_PPROMISC","","",null,null],[17,"IFF_MONITOR","","",null,null],[17,"IFF_STATICARP","","",null,null],[17,"IFF_DYING","","",null,null],[17,"IFF_RENAMING","","",null,null],[17,"IPPROTO_HOPOPTS","","IP6 hop-by-hop options",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_GGP","","gateway^2 (deprecated)",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_ST","","Stream protocol II.",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PIGP","","private interior gateway",null,null],[17,"IPPROTO_RCCMON","","BBN RCC Monitoring",null,null],[17,"IPPROTO_NVPII","","network voice protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_ARGUS","","Argus",null,null],[17,"IPPROTO_EMCON","","EMCON",null,null],[17,"IPPROTO_XNET","","Cross Net Debugger",null,null],[17,"IPPROTO_CHAOS","","Chaos",null,null],[17,"IPPROTO_MUX","","Multiplexing",null,null],[17,"IPPROTO_MEAS","","DCN Measurement Subsystems",null,null],[17,"IPPROTO_HMP","","Host Monitoring",null,null],[17,"IPPROTO_PRM","","Packet Radio Measurement",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TRUNK1","","Trunk-1",null,null],[17,"IPPROTO_TRUNK2","","Trunk-2",null,null],[17,"IPPROTO_LEAF1","","Leaf-1",null,null],[17,"IPPROTO_LEAF2","","Leaf-2",null,null],[17,"IPPROTO_RDP","","Reliable Data",null,null],[17,"IPPROTO_IRTP","","Reliable Transaction",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_BLT","","Bulk Data Transfer",null,null],[17,"IPPROTO_NSP","","Network Services",null,null],[17,"IPPROTO_INP","","Merit Internodal",null,null],[17,"IPPROTO_SEP","","Sequential Exchange",null,null],[17,"IPPROTO_3PC","","Third Party Connect",null,null],[17,"IPPROTO_IDPR","","InterDomain Policy Routing",null,null],[17,"IPPROTO_XTP","","XTP",null,null],[17,"IPPROTO_DDP","","Datagram Delivery",null,null],[17,"IPPROTO_CMTP","","Control Message Transport",null,null],[17,"IPPROTO_TPXX","","TP++ Transport",null,null],[17,"IPPROTO_IL","","IL transport protocol",null,null],[17,"IPPROTO_SDRP","","Source Demand Routing",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_IDRP","","InterDomain Routing",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_MHRP","","Mobile Host Routing",null,null],[17,"IPPROTO_BHA","","BHA",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_INLSP","","Integ. Net Layer Security",null,null],[17,"IPPROTO_SWIPE","","IP with encryption",null,null],[17,"IPPROTO_NHRP","","Next Hop Resolution",null,null],[17,"IPPROTO_MOBILE","","IP Mobility",null,null],[17,"IPPROTO_TLSP","","Transport Layer Security",null,null],[17,"IPPROTO_SKIP","","SKIP",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_AHIP","","any host internal protocol",null,null],[17,"IPPROTO_CFTP","","CFTP",null,null],[17,"IPPROTO_HELLO","","\"hello\" routing protocol",null,null],[17,"IPPROTO_SATEXPAK","","SATNET/Backroom EXPAK",null,null],[17,"IPPROTO_KRYPTOLAN","","Kryptolan",null,null],[17,"IPPROTO_RVD","","Remote Virtual Disk",null,null],[17,"IPPROTO_IPPC","","Pluribus Packet Core",null,null],[17,"IPPROTO_ADFS","","Any distributed FS",null,null],[17,"IPPROTO_SATMON","","Satnet Monitoring",null,null],[17,"IPPROTO_VISA","","VISA Protocol",null,null],[17,"IPPROTO_IPCV","","Packet Core Utility",null,null],[17,"IPPROTO_CPNX","","Comp. Prot. Net. Executive",null,null],[17,"IPPROTO_CPHB","","Comp. Prot. HeartBeat",null,null],[17,"IPPROTO_WSN","","Wang Span Network",null,null],[17,"IPPROTO_PVP","","Packet Video Protocol",null,null],[17,"IPPROTO_BRSATMON","","BackRoom SATNET Monitoring",null,null],[17,"IPPROTO_ND","","Sun net disk proto (temp.)",null,null],[17,"IPPROTO_WBMON","","WIDEBAND Monitoring",null,null],[17,"IPPROTO_WBEXPAK","","WIDEBAND EXPAK",null,null],[17,"IPPROTO_EON","","ISO cnlp",null,null],[17,"IPPROTO_VMTP","","VMTP",null,null],[17,"IPPROTO_SVMTP","","Secure VMTP",null,null],[17,"IPPROTO_VINES","","Banyon VINES",null,null],[17,"IPPROTO_TTP","","TTP",null,null],[17,"IPPROTO_IGP","","NSFNET-IGP",null,null],[17,"IPPROTO_DGP","","dissimilar gateway prot.",null,null],[17,"IPPROTO_TCF","","TCF",null,null],[17,"IPPROTO_IGRP","","Cisco/GXS IGRP",null,null],[17,"IPPROTO_OSPFIGP","","OSPFIGP",null,null],[17,"IPPROTO_SRPC","","Strite RPC protocol",null,null],[17,"IPPROTO_LARP","","Locus Address Resoloution",null,null],[17,"IPPROTO_MTP","","Multicast Transport",null,null],[17,"IPPROTO_AX25","","AX.25 Frames",null,null],[17,"IPPROTO_IPEIP","","IP encapsulated in IP",null,null],[17,"IPPROTO_MICP","","Mobile Int.ing control",null,null],[17,"IPPROTO_SCCSP","","Semaphore Comm. security",null,null],[17,"IPPROTO_ETHERIP","","Ethernet IP encapsulation",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_APES","","any private encr. scheme",null,null],[17,"IPPROTO_GMTP","","GMTP",null,null],[17,"IPPROTO_IPCOMP","","payload compression (IPComp)",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","IPv6 Mobility Header",null,null],[17,"IPPROTO_UDPLITE","","UDP-Lite",null,null],[17,"IPPROTO_HIP","","IP6 Host Identity Protocol",null,null],[17,"IPPROTO_SHIM6","","IP6 Shim6 Protocol",null,null],[17,"IPPROTO_PIM","","Protocol Independent Mcast",null,null],[17,"IPPROTO_CARP","","CARP",null,null],[17,"IPPROTO_PGM","","PGM",null,null],[17,"IPPROTO_MPLS","","MPLS-in-IP",null,null],[17,"IPPROTO_PFSYNC","","PFSYNC",null,null],[17,"IPPROTO_OLD_DIVERT","","OLD divert pseudo-proto",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"IPPROTO_DONE","","last return value of *_input(), meaning \"all job for this pkt is done\".",null,null],[17,"IPPROTO_DIVERT","","divert pseudo-protocol",null,null],[17,"IPPROTO_SEND","","SeND pseudo-protocol",null,null],[17,"IP_BINDANY","","",null,null],[17,"PF_SLOW","","",null,null],[17,"PF_SCLUSTER","","",null,null],[17,"PF_ARP","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IEEE80211","","",null,null],[17,"PF_INET_SDP","","",null,null],[17,"PF_INET6_SDP","","",null,null],[17,"NET_RT_DUMP","","",null,null],[17,"NET_RT_FLAGS","","",null,null],[17,"NET_RT_IFLIST","","",null,null],[17,"NET_RT_IFMALIST","","",null,null],[17,"NET_RT_IFLISTL","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"IPC_R","","",null,null],[17,"IPC_W","","",null,null],[17,"IPC_M","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_STAT","","",null,null],[17,"SHM_INFO","","",null,null],[17,"SHM_ANON","","",null,null],[17,"MSG_NOTIFICATION","","",null,null],[17,"MSG_NBIO","","",null,null],[17,"MSG_COMPAT","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"EMPTY","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"SHUTDOWN_TIME","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"WEXITED","","",null,null],[17,"WTRAPPED","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"P_ALL","","",null,null],[17,"B460800","","",null,null],[17,"B921600","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_EACCESS","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"TABDLY","","",null,null],[17,"TAB0","","",null,null],[17,"TAB3","","",null,null],[17,"_PC_ACL_NFS4","","",null,null],[17,"_SC_CPUSET_SIZE","","",null,null],[17,"XU_NGROUPS","","",null,null],[17,"XUCRED_VERSION","","",null,null],[17,"PD_DAEMON","","",null,null],[17,"PD_CLOEXEC","","",null,null],[17,"PD_ALLOWED_AT_FORK","","",null,null],[17,"RTP_PRIO_REALTIME","","",null,null],[17,"RTP_PRIO_NORMAL","","",null,null],[17,"RTP_PRIO_IDLE","","",null,null],[17,"POSIX_SPAWN_RESETIDS","","",null,null],[17,"POSIX_SPAWN_SETPGROUP","","",null,null],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",null,null],[17,"POSIX_SPAWN_SETSCHEDULER","","",null,null],[17,"POSIX_SPAWN_SETSIGDEF","","",null,null],[17,"POSIX_SPAWN_SETSIGMASK","","",null,null],[17,"MAP_32BIT","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"cmsghdr"],[3,"if_nameindex"],[3,"glob_t"],[3,"kevent"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"sched_param"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[3,"cmsgcred"],[3,"rtprio"],[3,"in6_pktinfo"],[3,"utmpx"],[3,"aiocb"],[3,"dirent"],[3,"jail"],[3,"mq_attr"],[3,"sigevent"],[3,"statvfs"],[3,"ipc_perm"],[3,"msqid_ds"],[3,"shmid_ds"],[3,"xucred"],[3,"sockaddr_dl"],[3,"stat"],[3,"_sem"],[3,"sigset_t"],[3,"fd_set"],[3,"fsid_t"]]};
searchIndex["nix"] = {"doc":"Rust friendly bindings to the various *nix system functions.","items":[[4,"Error","nix","Nix Error Type",null,null],[13,"Sys","","",0,null],[13,"InvalidPath","","",0,null],[13,"InvalidUtf8","","The operation involved a conversion to Rust's native String type, which failed because the string did not contain all valid UTF-8.",0,null],[13,"UnsupportedOperation","","The operation is not supported by Nix, in this instance either use the libc bindings or consult the module documentation to see if there is a more appropriate interface available.",0,null],[0,"errno","","",null,null],[4,"Errno","nix::errno","",null,null],[13,"UnknownErrno","","",1,null],[13,"EPERM","","",1,null],[13,"ENOENT","","",1,null],[13,"ESRCH","","",1,null],[13,"EINTR","","",1,null],[13,"EIO","","",1,null],[13,"ENXIO","","",1,null],[13,"E2BIG","","",1,null],[13,"ENOEXEC","","",1,null],[13,"EBADF","","",1,null],[13,"ECHILD","","",1,null],[13,"EDEADLK","","",1,null],[13,"ENOMEM","","",1,null],[13,"EACCES","","",1,null],[13,"EFAULT","","",1,null],[13,"ENOTBLK","","",1,null],[13,"EBUSY","","",1,null],[13,"EEXIST","","",1,null],[13,"EXDEV","","",1,null],[13,"ENODEV","","",1,null],[13,"ENOTDIR","","",1,null],[13,"EISDIR","","",1,null],[13,"EINVAL","","",1,null],[13,"ENFILE","","",1,null],[13,"EMFILE","","",1,null],[13,"ENOTTY","","",1,null],[13,"ETXTBSY","","",1,null],[13,"EFBIG","","",1,null],[13,"ENOSPC","","",1,null],[13,"ESPIPE","","",1,null],[13,"EROFS","","",1,null],[13,"EMLINK","","",1,null],[13,"EPIPE","","",1,null],[13,"EDOM","","",1,null],[13,"ERANGE","","",1,null],[13,"EAGAIN","","",1,null],[13,"EINPROGRESS","","",1,null],[13,"EALREADY","","",1,null],[13,"ENOTSOCK","","",1,null],[13,"EDESTADDRREQ","","",1,null],[13,"EMSGSIZE","","",1,null],[13,"EPROTOTYPE","","",1,null],[13,"ENOPROTOOPT","","",1,null],[13,"EPROTONOSUPPORT","","",1,null],[13,"ESOCKTNOSUPPORT","","",1,null],[13,"ENOTSUP","","",1,null],[13,"EPFNOSUPPORT","","",1,null],[13,"EAFNOSUPPORT","","",1,null],[13,"EADDRINUSE","","",1,null],[13,"EADDRNOTAVAIL","","",1,null],[13,"ENETDOWN","","",1,null],[13,"ENETUNREACH","","",1,null],[13,"ENETRESET","","",1,null],[13,"ECONNABORTED","","",1,null],[13,"ECONNRESET","","",1,null],[13,"ENOBUFS","","",1,null],[13,"EISCONN","","",1,null],[13,"ENOTCONN","","",1,null],[13,"ESHUTDOWN","","",1,null],[13,"ETOOMANYREFS","","",1,null],[13,"ETIMEDOUT","","",1,null],[13,"ECONNREFUSED","","",1,null],[13,"ELOOP","","",1,null],[13,"ENAMETOOLONG","","",1,null],[13,"EHOSTDOWN","","",1,null],[13,"EHOSTUNREACH","","",1,null],[13,"ENOTEMPTY","","",1,null],[13,"EPROCLIM","","",1,null],[13,"EUSERS","","",1,null],[13,"EDQUOT","","",1,null],[13,"ESTALE","","",1,null],[13,"EREMOTE","","",1,null],[13,"EBADRPC","","",1,null],[13,"ERPCMISMATCH","","",1,null],[13,"EPROGUNAVAIL","","",1,null],[13,"EPROGMISMATCH","","",1,null],[13,"EPROCUNAVAIL","","",1,null],[13,"ENOLCK","","",1,null],[13,"ENOSYS","","",1,null],[13,"EFTYPE","","",1,null],[13,"EAUTH","","",1,null],[13,"ENEEDAUTH","","",1,null],[13,"EIDRM","","",1,null],[13,"ENOMSG","","",1,null],[13,"EOVERFLOW","","",1,null],[13,"ECANCELED","","",1,null],[13,"EILSEQ","","",1,null],[13,"ENOATTR","","",1,null],[13,"EDOOFUS","","",1,null],[13,"EBADMSG","","",1,null],[13,"EMULTIHOP","","",1,null],[13,"ENOLINK","","",1,null],[13,"EPROTO","","",1,null],[13,"ENOTCAPABLE","","",1,null],[13,"ECAPMODE","","",1,null],[13,"ENOTRECOVERABLE","","",1,null],[13,"EOWNERDEAD","","",1,null],[5,"from_i32","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[5,"errno","","Returns the platform-specific value of errno",null,{"inputs":[],"output":{"name":"i32"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"errno"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"errno"}],"output":{"name":"bool"}}],[17,"ELAST","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EL2NSYNC","","",null,null],[8,"ErrnoSentinel","","The sentinel value indicates that a function failed and more detailed information about the error can be found in `errno`",null,null],[10,"sentinel","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"last","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"desc","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_i32","","",1,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[11,"clear","","",1,null],[11,"result","","Returns `Ok(value)` if it does not contain the sentinel value. This should not be used when `-1` is not the errno sentinel value.",1,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"features","nix","Feature tests for OS functionality",null,null],[5,"socket_atomic_cloexec","nix::features","Check if the OS supports atomic close-on-exec for sockets",null,{"inputs":[],"output":{"name":"bool"}}],[0,"fcntl","nix","",null,null],[3,"AtFlags","nix::fcntl","",null,null],[3,"OFlag","","Configuration options for opened files.",null,null],[3,"FdFlag","","Additional configuration flags for `fcntl`'s `F_SETFD`.",null,null],[4,"FcntlArg","","",null,null],[13,"F_DUPFD","","",3,null],[13,"F_DUPFD_CLOEXEC","","",3,null],[13,"F_GETFD","","",3,null],[13,"F_SETFD","","",3,null],[13,"F_GETFL","","",3,null],[13,"F_SETFL","","",3,null],[13,"F_SETLK","","",3,null],[13,"F_SETLKW","","",3,null],[13,"F_GETLK","","",3,null],[4,"FlockArg","","",null,null],[13,"LockShared","","",4,null],[13,"LockExclusive","","",4,null],[13,"Unlock","","",4,null],[13,"LockSharedNonblock","","",4,null],[13,"LockExclusiveNonblock","","",4,null],[13,"UnlockNonblock","","",4,null],[5,"open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"openat","","",null,{"inputs":[{"name":"rawfd"},{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"readlink","","",null,null],[5,"readlinkat","","",null,null],[5,"fcntl","","",null,{"inputs":[{"name":"rawfd"},{"name":"fcntlarg"}],"output":{"generics":["c_int"],"name":"result"}}],[5,"flock","","",null,{"inputs":[{"name":"rawfd"},{"name":"flockarg"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"atflags"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"ordering"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"AT_SYMLINK_NOFOLLOW","","",5,null],[11,"empty","","Returns an empty set of flags.",5,{"inputs":[],"output":{"name":"atflags"}}],[11,"all","","Returns the set containing all flags.",5,{"inputs":[],"output":{"name":"atflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",5,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",5,{"inputs":[{"name":"c_int"}],"output":{"generics":["atflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",5,{"inputs":[{"name":"c_int"}],"output":{"name":"atflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",5,{"inputs":[{"name":"self"},{"name":"atflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"atflags"}}],[11,"bitor_assign","","Adds the set of flags.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"atflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"atflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":{"name":"atflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",5,{"inputs":[{"name":"self"},{"name":"atflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",5,{"inputs":[{"name":"self"}],"output":{"name":"atflags"}}],[11,"extend","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",5,{"inputs":[{"name":"t"}],"output":{"name":"atflags"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"oflag"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"ordering"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"O_ACCMODE","","Mask for the access mode of the file.",6,null],[18,"O_APPEND","","Open the file in append-only mode.",6,null],[18,"O_ASYNC","","Generate a signal when input or output becomes possible.",6,null],[18,"O_CLOEXEC","","Closes the file descriptor once an `execve` call is made.",6,null],[18,"O_CREAT","","Create the file if it does not exist.",6,null],[18,"O_DIRECT","","Try to minimize cache effects of the I/O for this file.",6,null],[18,"O_DIRECTORY","","If the specified path isn't a directory, fail.",6,null],[18,"O_EXCL","","Error out if a file was not created.",6,null],[18,"O_EXEC","","Open for execute only.",6,null],[18,"O_EXLOCK","","Open with an exclusive file lock.",6,null],[18,"O_FSYNC","","Same as `O_SYNC`.",6,null],[18,"O_NOCTTY","","Don't attach the device as the process' controlling terminal.",6,null],[18,"O_NDELAY","","Same as `O_NONBLOCK`.",6,null],[18,"O_NOFOLLOW","","`open()` will fail if the given path is a symbolic link.",6,null],[18,"O_NONBLOCK","","When possible, open the file in nonblocking mode.",6,null],[18,"O_RDONLY","","Only allow reading.",6,null],[18,"O_RDWR","","Allow both reading and writing.",6,null],[18,"O_SHLOCK","","Open with a shared file lock.",6,null],[18,"O_SYNC","","Implicitly follow each `write()` with an `fsync()`.",6,null],[18,"O_TRUNC","","Truncate an existing regular file to 0 length if it allows writing.",6,null],[18,"O_TTY_INIT","","Restore default TTY attributes.",6,null],[18,"O_WRONLY","","Only allow writing.",6,null],[11,"empty","","Returns an empty set of flags.",6,{"inputs":[],"output":{"name":"oflag"}}],[11,"all","","Returns the set containing all flags.",6,{"inputs":[],"output":{"name":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",6,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",6,{"inputs":[{"name":"c_int"}],"output":{"generics":["oflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",6,{"inputs":[{"name":"c_int"}],"output":{"name":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",6,{"inputs":[{"name":"self"},{"name":"oflag"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitor_assign","","Adds the set of flags.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",6,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",6,{"inputs":[{"name":"self"}],"output":{"name":"oflag"}}],[11,"extend","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",6,{"inputs":[{"name":"t"}],"output":{"name":"oflag"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fdflag"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"ordering"}}],[11,"hash","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FD_CLOEXEC","","The file descriptor will automatically be closed during a successful `execve(2)`.",7,null],[11,"empty","","Returns an empty set of flags.",7,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",7,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",7,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",7,{"inputs":[{"name":"c_int"}],"output":{"generics":["fdflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",7,{"inputs":[{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",7,{"inputs":[{"name":"self"},{"name":"fdflag"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitor_assign","","Adds the set of flags.",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",7,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",7,{"inputs":[{"name":"self"}],"output":{"name":"fdflag"}}],[11,"extend","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",7,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"flockarg"}}],[0,"ifaddrs","nix","Query network interface addresses",null,null],[3,"InterfaceAddress","nix::ifaddrs","Describes a single address for an interface as returned by `getifaddrs`.",null,null],[12,"interface_name","","Name of the network interface",8,null],[12,"flags","","Flags as from `SIOCGIFFLAGS` ioctl",8,null],[12,"address","","Network address of this interface",8,null],[12,"netmask","","Netmask of this interface",8,null],[12,"broadcast","","Broadcast address of this interface, if applicable",8,null],[12,"destination","","Point-to-point destination address",8,null],[3,"InterfaceAddressIterator","","Holds the results of `getifaddrs`.",null,null],[5,"getifaddrs","","Get interface addresses using libc's `getifaddrs`",null,{"inputs":[],"output":{"generics":["interfaceaddressiterator"],"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"interfaceaddress"}}],[11,"hash","","",8,null],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"interfaceaddress"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"interfaceaddress"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"interfaceaddressiterator"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"interfaceaddressiterator"}],"output":{"name":"bool"}}],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"mqueue","nix","Posix Message Queue functions",null,null],[3,"MQ_OFlag","nix::mqueue","",null,null],[3,"FdFlag","","",null,null],[3,"MqAttr","","",null,null],[5,"mq_open","","Open a message queue",null,{"inputs":[{"name":"cstring"},{"name":"mq_oflag"},{"name":"mode"},{"generics":["mqattr"],"name":"option"}],"output":{"generics":["mqd_t"],"name":"result"}}],[5,"mq_unlink","","Remove a message queue",null,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[5,"mq_close","","Close a message queue",null,{"inputs":[{"name":"mqd_t"}],"output":{"name":"result"}}],[5,"mq_receive","","Receive a message from a message queue",null,null],[5,"mq_send","","Send a message to a message queue",null,null],[5,"mq_getattr","","Get message queue attributes",null,{"inputs":[{"name":"mqd_t"}],"output":{"generics":["mqattr"],"name":"result"}}],[5,"mq_setattr","","Set the attributes of the message queue. Only `O_NONBLOCK` can be set, everything else will be ignored Returns the old attributes It is recommend to use the `mq_set_nonblock()` and `mq_remove_nonblock()` convenience functions as they are easier to use",null,{"inputs":[{"name":"mqd_t"},{"name":"mqattr"}],"output":{"generics":["mqattr"],"name":"result"}}],[5,"mq_set_nonblock","","Convenience function. Sets the `O_NONBLOCK` attribute for a given message queue descriptor Returns the old attributes",null,{"inputs":[{"name":"mqd_t"}],"output":{"generics":["mqattr"],"name":"result"}}],[5,"mq_remove_nonblock","","Convenience function. Removes `O_NONBLOCK` attribute for a given message queue descriptor Returns the old attributes",null,{"inputs":[{"name":"mqd_t"}],"output":{"generics":["mqattr"],"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"mq_oflag"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"ordering"}}],[11,"hash","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"O_RDONLY","","",10,null],[18,"O_WRONLY","","",10,null],[18,"O_RDWR","","",10,null],[18,"O_CREAT","","",10,null],[18,"O_EXCL","","",10,null],[18,"O_NONBLOCK","","",10,null],[18,"O_CLOEXEC","","",10,null],[11,"empty","","Returns an empty set of flags.",10,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"all","","Returns the set containing all flags.",10,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",10,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",10,{"inputs":[{"name":"c_int"}],"output":{"generics":["mq_oflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",10,{"inputs":[{"name":"c_int"}],"output":{"name":"mq_oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",10,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",10,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",10,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",10,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",10,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",10,{"inputs":[{"name":"self"},{"name":"mq_oflag"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",10,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"bitor_assign","","Adds the set of flags.",10,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",10,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",10,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",10,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",10,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",10,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",10,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",10,{"inputs":[{"name":"self"}],"output":{"name":"mq_oflag"}}],[11,"extend","","",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",10,{"inputs":[{"name":"t"}],"output":{"name":"mq_oflag"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"fdflag"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"ordering"}}],[11,"hash","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FD_CLOEXEC","","",11,null],[11,"empty","","Returns an empty set of flags.",11,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",11,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",11,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",11,{"inputs":[{"name":"c_int"}],"output":{"generics":["fdflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",11,{"inputs":[{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",11,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",11,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",11,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",11,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",11,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",11,{"inputs":[{"name":"self"},{"name":"fdflag"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",11,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitor_assign","","Adds the set of flags.",11,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",11,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",11,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",11,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",11,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",11,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",11,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",11,{"inputs":[{"name":"self"}],"output":{"name":"fdflag"}}],[11,"extend","","",11,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",11,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"mqattr"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"mqattr"}],"output":{"name":"bool"}}],[11,"new","","",12,{"inputs":[{"name":"c_long"},{"name":"c_long"},{"name":"c_long"},{"name":"c_long"}],"output":{"name":"mqattr"}}],[11,"flags","","",12,{"inputs":[{"name":"self"}],"output":{"name":"c_long"}}],[0,"net","nix","Functionality involving network interfaces",null,null],[0,"if_","nix::net","Network interface name resolution.",null,null],[3,"InterfaceFlags","nix::net::if_","Standard interface flags, used by `getifaddrs`",null,null],[5,"if_nametoindex","","Resolve an interface into a interface number.",null,{"inputs":[{"name":"p"}],"output":{"generics":["c_uint"],"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"interfaceflags"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"ordering"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"IFF_UP","","Interface is running. (see `netdevice(7)`)",13,null],[18,"IFF_BROADCAST","","Valid broadcast address set. (see `netdevice(7)`)",13,null],[18,"IFF_DEBUG","","Internal debugging flag. (see `netdevice(7)`)",13,null],[18,"IFF_LOOPBACK","","Interface is a loopback interface. (see `netdevice(7)`)",13,null],[18,"IFF_POINTOPOINT","","Interface is a point-to-point link. (see `netdevice(7)`)",13,null],[18,"IFF_RUNNING","","Resources allocated. (see `netdevice(7)`)",13,null],[18,"IFF_NOARP","","No arp protocol, L2 destination address not set. (see `netdevice(7)`)",13,null],[18,"IFF_PROMISC","","Interface is in promiscuous mode. (see `netdevice(7)`)",13,null],[18,"IFF_ALLMULTI","","Receive all multicast packets. (see `netdevice(7)`)",13,null],[18,"IFF_OACTIVE","","transmission in progress, tx hardware queue is full",13,null],[18,"IFF_SIMPLEX","","Can't hear own transmissions.",13,null],[18,"IFF_MULTICAST","","Supports multicast. (see `netdevice(7)`)",13,null],[18,"IFF_LINK0","","Per link layer defined bit.",13,null],[18,"IFF_LINK1","","Per link layer defined bit.",13,null],[18,"IFF_LINK2","","Per link layer defined bit.",13,null],[18,"IFF_ALTPHYS","","Use alternate physical connection.",13,null],[18,"IFF_CANTCONFIG","","Unconfigurable using ioctl(2).",13,null],[18,"IFF_PPROMISC","","User-requested promisc mode.",13,null],[18,"IFF_MONITOR","","User-requested monitor mode.",13,null],[18,"IFF_STATICARP","","Static ARP.",13,null],[18,"IFF_DYING","","Interface is winding down",13,null],[18,"IFF_RENAMING","","Interface is being renamed",13,null],[11,"empty","","Returns an empty set of flags.",13,{"inputs":[],"output":{"name":"interfaceflags"}}],[11,"all","","Returns the set containing all flags.",13,{"inputs":[],"output":{"name":"interfaceflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",13,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",13,{"inputs":[{"name":"c_int"}],"output":{"generics":["interfaceflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",13,{"inputs":[{"name":"c_int"}],"output":{"name":"interfaceflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",13,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",13,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",13,{"inputs":[{"name":"self"},{"name":"interfaceflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"interfaceflags"}}],[11,"bitor_assign","","Adds the set of flags.",13,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",13,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"interfaceflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",13,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"interfaceflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",13,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":{"name":"interfaceflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",13,{"inputs":[{"name":"self"},{"name":"interfaceflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",13,{"inputs":[{"name":"self"}],"output":{"name":"interfaceflags"}}],[11,"extend","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",13,{"inputs":[{"name":"t"}],"output":{"name":"interfaceflags"}}],[0,"poll","nix","Wait for events to trigger on specific file descriptors",null,null],[3,"PollFd","nix::poll","This is a wrapper around `libc::pollfd`.",null,null],[3,"EventFlags","","These flags define the different events that can be monitored by `poll` and `ppoll`",null,null],[5,"poll","","`poll` waits for one of a set of file descriptors to become ready to perform I/O. (`poll(2)`)",null,null],[5,"ppoll","","`ppoll()` allows an application to safely wait until either a file descriptor becomes ready or until a signal is caught. (`poll(2)`)",null,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"new","","Creates a new `PollFd` specifying the events of interest for a given file descriptor.",14,{"inputs":[{"name":"rawfd"},{"name":"eventflags"}],"output":{"name":"pollfd"}}],[11,"revents","","Returns the events that occured in the last call to `poll` or `ppoll`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["eventflags"],"name":"option"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"eventflags"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"cmp","","",15,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"ordering"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"POLLIN","","There is data to read.",15,null],[18,"POLLPRI","","There is some exceptional condition on the file descriptor.",15,null],[18,"POLLOUT","","Writing is now possible, though a write larger that the available space in a socket or pipe will still block (unless `O_NONBLOCK` is set).",15,null],[18,"POLLRDNORM","","Equivalent to `POLLIN`",15,null],[18,"POLLWRNORM","","Equivalent to `POLLOUT`",15,null],[18,"POLLRDBAND","","Priority band data can be read (generally unused on Linux).",15,null],[18,"POLLWRBAND","","Priority data may be written.",15,null],[18,"POLLERR","","Error condition (only returned in `PollFd::revents`; ignored in `PollFd::new`). This bit is also set for a file descriptor referring to the write end of a pipe when the read end has been closed.",15,null],[18,"POLLHUP","","Hang up (only returned in `PollFd::revents`; ignored in `PollFd::new`). Note that when reading from a channel such as a pipe or a stream socket, this event merely indicates that the peer closed its end of the channel.  Subsequent reads from the channel will return 0 (end of file) only after all outstanding data in the channel has been consumed.",15,null],[18,"POLLNVAL","","Invalid request: `fd` not open (only returned in `PollFd::revents`; ignored in `PollFd::new`).",15,null],[11,"empty","","Returns an empty set of flags.",15,{"inputs":[],"output":{"name":"eventflags"}}],[11,"all","","Returns the set containing all flags.",15,{"inputs":[],"output":{"name":"eventflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",15,{"inputs":[{"name":"self"}],"output":{"name":"c_short"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",15,{"inputs":[{"name":"c_short"}],"output":{"generics":["eventflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",15,{"inputs":[{"name":"c_short"}],"output":{"name":"eventflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",15,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",15,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",15,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",15,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",15,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",15,{"inputs":[{"name":"self"},{"name":"eventflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",15,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"bitor_assign","","Adds the set of flags.",15,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",15,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",15,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",15,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",15,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",15,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",15,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",15,{"inputs":[{"name":"self"}],"output":{"name":"eventflags"}}],[11,"extend","","",15,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",15,{"inputs":[{"name":"t"}],"output":{"name":"eventflags"}}],[0,"pty","nix","Create master and slave virtual pseudo-terminals (PTYs)",null,null],[6,"SessionId","nix::pty","",null,null],[3,"Winsize","","",null,null],[12,"ws_row","","",16,null],[12,"ws_col","","",16,null],[12,"ws_xpixel","","",16,null],[12,"ws_ypixel","","",16,null],[3,"OpenptyResult","","Representation of a master/slave pty pair",null,null],[12,"master","","The master port in a virtual pty pair",17,null],[12,"slave","","The slave port in a virtual pty pair",17,null],[3,"PtyMaster","","Representation of the Master device in a master/slave pty pair",null,null],[5,"grantpt","","Grant access to a slave pseudoterminal (see `grantpt(3)`)",null,{"inputs":[{"name":"ptymaster"}],"output":{"name":"result"}}],[5,"posix_openpt","","Open a pseudoterminal device (see `posix_openpt(3)`)",null,{"inputs":[{"name":"oflag"}],"output":{"generics":["ptymaster"],"name":"result"}}],[5,"ptsname","","Get the name of the slave pseudoterminal (see `ptsname(3)`)",null,{"inputs":[{"name":"ptymaster"}],"output":{"generics":["string"],"name":"result"}}],[5,"unlockpt","","Unlock a pseudoterminal master/slave pseudoterminal pair (see `unlockpt(3)`)",null,{"inputs":[{"name":"ptymaster"}],"output":{"name":"result"}}],[5,"openpty","","Create a new pseudoterminal, returning the slave and master file descriptors in `OpenptyResult` (see `openpty`).",null,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"generics":["openptyresult"],"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"openptyresult"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",18,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"into_raw_fd","","",18,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"drop","","",18,{"inputs":[{"name":"self"}],"output":null}],[0,"sys","nix","",null,null],[0,"aio","nix::sys","POSIX Asynchronous I/O",null,null],[3,"AioCb","nix::sys::aio","AIO Control Block.",null,null],[3,"LioCb","","LIO Control Block.",null,null],[12,"aiocbs","","A collection of [`AioCb`]s.  All of these will be issued simultaneously by the [`listio`] method.",19,null],[4,"AioFsyncMode","","Mode for `AioCb::fsync`.  Controls whether only data or both data and metadata are synced.",null,null],[13,"O_SYNC","","do it like `fsync`",20,null],[4,"LioOpcode","","When used with `lio_listio`, determines whether a given `aiocb` should be used for a read operation, a write operation, or ignored.  Has no effect for any other aio functions.",null,null],[13,"LIO_NOP","","",21,null],[13,"LIO_WRITE","","",21,null],[13,"LIO_READ","","",21,null],[4,"LioMode","","Mode for `lio_listio`",null,null],[13,"LIO_WAIT","","Requests that `lio_listio` block until all requested operations have been completed",22,null],[13,"LIO_NOWAIT","","Requests that `lio_listio` return immediately",22,null],[4,"AioCancelStat","","Return values for `AioCb::cancel` and `aio_cancel_all`",null,null],[13,"AioCanceled","","All outstanding requests were canceled",23,null],[13,"AioNotCanceled","","Some requests were not canceled.  Their status should be checked with `AioCb::error`",23,null],[13,"AioAllDone","","All of the requests have already finished",23,null],[4,"Buffer","","Owns (uniquely or shared) a memory buffer to keep it from `Drop`ing while the kernel has a pointer to it.",null,null],[13,"None","","No buffer to own.",24,null],[13,"Phantom","","Keeps a reference to a slice",24,null],[13,"BoxedSlice","","Generic thing that keeps a buffer from dropping",24,null],[13,"BoxedMutSlice","","Generic thing that keeps a mutable buffer from dropping",24,null],[5,"aio_cancel_all","","Cancels outstanding AIO requests for a given file descriptor.",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["aiocancelstat"],"name":"result"}}],[5,"aio_suspend","","Suspends the calling process until at least one of the specified `AioCb`s has completed, a signal is delivered, or the timeout has passed.",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"aiofsyncmode"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"cmp","","",20,{"inputs":[{"name":"self"},{"name":"aiofsyncmode"}],"output":{"name":"ordering"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"aiofsyncmode"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"self"},{"name":"aiofsyncmode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"lioopcode"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",21,null],[11,"cmp","","",21,{"inputs":[{"name":"self"},{"name":"lioopcode"}],"output":{"name":"ordering"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"lioopcode"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"self"},{"name":"lioopcode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"liomode"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[11,"cmp","","",22,{"inputs":[{"name":"self"},{"name":"liomode"}],"output":{"name":"ordering"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"liomode"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"liomode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"aiocancelstat"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"aiocancelstat"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"buffer","","Remove the inner `Buffer` and return it",25,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"boxed_slice","","Remove the inner boxed slice, if any, and return it.",25,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"boxed_mut_slice","","Remove the inner boxed mutable slice, if any, and return it.",25,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"fd","","Returns the underlying file descriptor associated with the `AioCb`",25,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_fd","","Constructs a new `AioCb` with no associated buffer.",25,{"inputs":[{"name":"rawfd"},{"name":"c_int"},{"name":"sigevnotify"}],"output":{"name":"aiocb"}}],[11,"from_mut_slice","","Constructs a new `AioCb` from a mutable slice.",25,null],[11,"from_boxed_slice","","The safest and most flexible way to create an `AioCb`.",25,{"inputs":[{"name":"rawfd"},{"name":"off_t"},{"generics":["borrow"],"name":"box"},{"name":"c_int"},{"name":"sigevnotify"},{"name":"lioopcode"}],"output":{"name":"aiocb"}}],[11,"from_boxed_mut_slice","","The safest and most flexible way to create an `AioCb` for reading.",25,{"inputs":[{"name":"rawfd"},{"name":"off_t"},{"generics":["borrowmut"],"name":"box"},{"name":"c_int"},{"name":"sigevnotify"},{"name":"lioopcode"}],"output":{"name":"aiocb"}}],[11,"from_mut_ptr","","Constructs a new `AioCb` from a mutable raw pointer",25,null],[11,"from_ptr","","Constructs a new `AioCb` from a raw pointer.",25,null],[11,"from_slice","","Like `from_mut_slice`, but works on constant slices rather than mutable slices.",25,null],[11,"set_sigev_notify","","Update the notification settings for an existing `aiocb`",25,{"inputs":[{"name":"self"},{"name":"sigevnotify"}],"output":null}],[11,"cancel","","Cancels an outstanding AIO request.",25,{"inputs":[{"name":"self"}],"output":{"generics":["aiocancelstat"],"name":"result"}}],[11,"error","","Retrieve error status of an asynchronous operation.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fsync","","An asynchronous version of `fsync(2)`.",25,{"inputs":[{"name":"self"},{"name":"aiofsyncmode"}],"output":{"name":"result"}}],[11,"lio_opcode","","Returns the `aiocb`'s `LioOpcode` field",25,{"inputs":[{"name":"self"}],"output":{"generics":["lioopcode"],"name":"option"}}],[11,"nbytes","","Returns the requested length of the aio operation in bytes",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"offset","","Returns the file offset stored in the `AioCb`",25,{"inputs":[{"name":"self"}],"output":{"name":"off_t"}}],[11,"priority","","Returns the priority of the `AioCb`",25,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"read","","Asynchronously reads from a file descriptor into a buffer",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"sigevent","","Returns the `SigEvent` stored in the `AioCb`",25,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"aio_return","","Retrieve return status of an asynchronous operation.",25,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"result"}}],[11,"write","","Asynchronously writes from a buffer to a file descriptor",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","If the `AioCb` has no remaining state in the kernel, just drop it. Otherwise, dropping constitutes a resource leak, which is an error",25,{"inputs":[{"name":"self"}],"output":null}],[11,"with_capacity","","Initialize an empty `LioCb`",19,{"inputs":[{"name":"usize"}],"output":{"name":"liocb"}}],[11,"listio","","Submits multiple asynchronous I/O requests with a single system call.",19,{"inputs":[{"name":"self"},{"name":"liomode"},{"name":"sigevnotify"}],"output":{"name":"result"}}],[11,"listio_resubmit","","Resubmits any incomplete operations with [`lio_listio`].",19,{"inputs":[{"name":"self"},{"name":"liomode"},{"name":"sigevnotify"}],"output":{"name":"result"}}],[11,"aio_return","","Collect final status for an individual `AioCb` submitted as part of an `LioCb`.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["isize"],"name":"result"}}],[11,"error","","Retrieve error status of an individual `AioCb` submitted as part of an `LioCb`.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",19,{"inputs":[{"generics":["aiocb"],"name":"vec"}],"output":{"name":"liocb"}}],[0,"event","nix::sys","",null,null],[3,"KEvent","nix::sys::event","",null,null],[3,"EventFlag","","",null,null],[3,"FilterFlag","","",null,null],[4,"EventFilter","","",null,null],[13,"EVFILT_AIO","","",26,null],[13,"EVFILT_EMPTY","","Returns whenever there is no remaining data in the write buffer",26,null],[13,"EVFILT_FS","","",26,null],[13,"EVFILT_LIO","","",26,null],[13,"EVFILT_PROC","","",26,null],[13,"EVFILT_PROCDESC","","Returns events associated with the process referenced by a given process descriptor, created by `pdfork()`. The events to monitor are:",26,null],[13,"EVFILT_READ","","",26,null],[13,"EVFILT_SENDFILE","","Returns whenever an asynchronous `sendfile()` call completes.",26,null],[13,"EVFILT_SIGNAL","","",26,null],[13,"EVFILT_TIMER","","",26,null],[13,"EVFILT_USER","","",26,null],[13,"EVFILT_VNODE","","",26,null],[13,"EVFILT_WRITE","","",26,null],[5,"kqueue","","",null,{"inputs":[],"output":{"generics":["rawfd"],"name":"result"}}],[5,"kevent","","",null,null],[5,"kevent_ts","","",null,null],[5,"ev_set","","",null,{"inputs":[{"name":"kevent"},{"name":"usize"},{"name":"eventfilter"},{"name":"eventflag"},{"name":"filterflag"},{"name":"intptr_t"}],"output":null}],[6,"type_of_event_flag","","",null,null],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"kevent"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"eventfilter"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",26,null],[11,"cmp","","",26,{"inputs":[{"name":"self"},{"name":"eventfilter"}],"output":{"name":"ordering"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"eventfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"self"},{"name":"eventfilter"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"eventflag"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"cmp","","",28,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"ordering"}}],[11,"hash","","",28,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"EV_ADD","","",28,null],[18,"EV_CLEAR","","",28,null],[18,"EV_DELETE","","",28,null],[18,"EV_DISABLE","","",28,null],[18,"EV_DISPATCH","","",28,null],[18,"EV_DROP","","",28,null],[18,"EV_ENABLE","","",28,null],[18,"EV_EOF","","",28,null],[18,"EV_ERROR","","",28,null],[18,"EV_FLAG1","","",28,null],[18,"EV_ONESHOT","","",28,null],[18,"EV_RECEIPT","","",28,null],[18,"EV_SYSFLAGS","","",28,null],[11,"empty","","Returns an empty set of flags.",28,{"inputs":[],"output":{"name":"eventflag"}}],[11,"all","","Returns the set containing all flags.",28,{"inputs":[],"output":{"name":"eventflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",28,{"inputs":[{"name":"self"}],"output":{"name":"type_of_event_flag"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",28,{"inputs":[{"name":"type_of_event_flag"}],"output":{"generics":["eventflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",28,{"inputs":[{"name":"type_of_event_flag"}],"output":{"name":"eventflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",28,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",28,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",28,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",28,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",28,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",28,{"inputs":[{"name":"self"},{"name":"eventflag"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",28,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"bitor_assign","","Adds the set of flags.",28,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",28,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",28,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",28,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",28,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",28,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":{"name":"eventflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",28,{"inputs":[{"name":"self"},{"name":"eventflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",28,{"inputs":[{"name":"self"}],"output":{"name":"eventflag"}}],[11,"extend","","",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",28,{"inputs":[{"name":"t"}],"output":{"name":"eventflag"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"filterflag"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",29,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"le","","",29,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"gt","","",29,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"ge","","",29,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"cmp","","",29,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"ordering"}}],[11,"hash","","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"NOTE_ATTRIB","","",29,null],[18,"NOTE_CHILD","","",29,null],[18,"NOTE_DELETE","","",29,null],[18,"NOTE_EXEC","","",29,null],[18,"NOTE_EXIT","","",29,null],[18,"NOTE_EXTEND","","",29,null],[18,"NOTE_FFAND","","",29,null],[18,"NOTE_FFCOPY","","",29,null],[18,"NOTE_FFCTRLMASK","","",29,null],[18,"NOTE_FFLAGSMASK","","",29,null],[18,"NOTE_FFNOP","","",29,null],[18,"NOTE_FFOR","","",29,null],[18,"NOTE_FORK","","",29,null],[18,"NOTE_LINK","","",29,null],[18,"NOTE_LOWAT","","",29,null],[18,"NOTE_MSECONDS","","",29,null],[18,"NOTE_NSECONDS","","",29,null],[18,"NOTE_PCTRLMASK","","",29,null],[18,"NOTE_PDATAMASK","","",29,null],[18,"NOTE_RENAME","","",29,null],[18,"NOTE_REVOKE","","",29,null],[18,"NOTE_SECONDS","","",29,null],[18,"NOTE_TRACK","","",29,null],[18,"NOTE_TRACKERR","","",29,null],[18,"NOTE_TRIGGER","","",29,null],[18,"NOTE_USECONDS","","",29,null],[18,"NOTE_WRITE","","",29,null],[11,"empty","","Returns an empty set of flags.",29,{"inputs":[],"output":{"name":"filterflag"}}],[11,"all","","Returns the set containing all flags.",29,{"inputs":[],"output":{"name":"filterflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",29,{"inputs":[{"name":"u32"}],"output":{"generics":["filterflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",29,{"inputs":[{"name":"u32"}],"output":{"name":"filterflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",29,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",29,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",29,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",29,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",29,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",29,{"inputs":[{"name":"self"},{"name":"filterflag"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",29,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"bitor_assign","","Adds the set of flags.",29,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",29,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",29,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",29,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",29,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",29,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":{"name":"filterflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",29,{"inputs":[{"name":"self"},{"name":"filterflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",29,{"inputs":[{"name":"self"}],"output":{"name":"filterflag"}}],[11,"extend","","",29,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",29,{"inputs":[{"name":"t"}],"output":{"name":"filterflag"}}],[11,"new","","",27,{"inputs":[{"name":"uintptr_t"},{"name":"eventfilter"},{"name":"eventflag"},{"name":"filterflag"},{"name":"intptr_t"},{"name":"intptr_t"}],"output":{"name":"kevent"}}],[11,"ident","","",27,{"inputs":[{"name":"self"}],"output":{"name":"uintptr_t"}}],[11,"filter","","",27,{"inputs":[{"name":"self"}],"output":{"name":"eventfilter"}}],[11,"flags","","",27,{"inputs":[{"name":"self"}],"output":{"name":"eventflag"}}],[11,"fflags","","",27,{"inputs":[{"name":"self"}],"output":{"name":"filterflag"}}],[11,"data","","",27,{"inputs":[{"name":"self"}],"output":{"name":"intptr_t"}}],[11,"udata","","",27,{"inputs":[{"name":"self"}],"output":{"name":"intptr_t"}}],[0,"ioctl","nix::sys","Provide helpers for making ioctl system calls.",null,null],[0,"mman","","",null,null],[3,"ProtFlags","nix::sys::mman","Desired memory protection of a memory mapping.",null,null],[3,"MapFlags","","Additional parameters for `mmap()`.",null,null],[3,"MsFlags","","Configuration flags for `msync`.",null,null],[3,"MlockAllFlags","","Flags for `mlockall`.",null,null],[4,"MmapAdvise","","Usage information for a range of memory to allow for performance optimizations by the kernel.",null,null],[13,"MADV_NORMAL","","No further special treatment. This is the default.",30,null],[13,"MADV_RANDOM","","Expect random page references.",30,null],[13,"MADV_SEQUENTIAL","","Expect sequential page references.",30,null],[13,"MADV_WILLNEED","","Expect access in the near future.",30,null],[13,"MADV_DONTNEED","","Do not expect access in the near future.",30,null],[13,"MADV_FREE","","Specify that the application no longer needs the pages in the given range.",30,null],[13,"MADV_NOSYNC","","Request that the system not flush the current range to disk unless it needs to.",30,null],[13,"MADV_AUTOSYNC","","Undoes the effects of `MADV_NOSYNC` for any future pages dirtied within the given range.",30,null],[13,"MADV_NOCORE","","Region is not included in a core file.",30,null],[13,"MADV_CORE","","Include region in a core file",30,null],[13,"MADV_PROTECT","","",30,null],[5,"mlock","","Locks all memory pages that contain part of the address range with `length` bytes starting at `addr`. Locked pages never move to the swap area.",null,null],[5,"munlock","","Unlocks all memory pages that contain part of the address range with `length` bytes starting at `addr`.",null,null],[5,"mlockall","","Locks all memory pages mapped into this process' address space. Locked pages never move to the swap area.",null,{"inputs":[{"name":"mlockallflags"}],"output":{"name":"result"}}],[5,"munlockall","","Unlocks all memory pages mapped into this process' address space.",null,{"inputs":[],"output":{"name":"result"}}],[5,"mmap","","Calls to mmap are inherently unsafe, so they must be made in an unsafe block. Typically a higher-level abstraction will hide the unsafe interactions with the mmap'd region.",null,null],[5,"munmap","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"shm_unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"protflags"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",31,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"le","","",31,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"gt","","",31,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"ge","","",31,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"cmp","","",31,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"ordering"}}],[11,"hash","","",31,null],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"PROT_NONE","","Pages cannot be accessed.",31,null],[18,"PROT_READ","","Pages can be read.",31,null],[18,"PROT_WRITE","","Pages can be written.",31,null],[18,"PROT_EXEC","","Pages can be executed",31,null],[11,"empty","","Returns an empty set of flags.",31,{"inputs":[],"output":{"name":"protflags"}}],[11,"all","","Returns the set containing all flags.",31,{"inputs":[],"output":{"name":"protflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",31,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",31,{"inputs":[{"name":"c_int"}],"output":{"generics":["protflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",31,{"inputs":[{"name":"c_int"}],"output":{"name":"protflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",31,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",31,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",31,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",31,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",31,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",31,{"inputs":[{"name":"self"},{"name":"protflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",31,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"bitor_assign","","Adds the set of flags.",31,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",31,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",31,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",31,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",31,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",31,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",31,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",31,{"inputs":[{"name":"self"}],"output":{"name":"protflags"}}],[11,"extend","","",31,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",31,{"inputs":[{"name":"t"}],"output":{"name":"protflags"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"mapflags"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",32,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"le","","",32,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"gt","","",32,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"ge","","",32,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"cmp","","",32,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"ordering"}}],[11,"hash","","",32,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"MAP_FILE","","Compatibility flag. Ignored.",32,null],[18,"MAP_SHARED","","Share this mapping. Mutually exclusive with `MAP_PRIVATE`.",32,null],[18,"MAP_PRIVATE","","Create a private copy-on-write mapping. Mutually exclusive with `MAP_SHARED`.",32,null],[18,"MAP_FIXED","","Place the mapping at exactly the address specified in `addr`.",32,null],[18,"MAP_ANON","","Synonym for `MAP_ANONYMOUS`.",32,null],[18,"MAP_ANONYMOUS","","The mapping is not backed by any file.",32,null],[18,"MAP_32BIT","","Put the mapping into the first 2GB of the process address space.",32,null],[18,"MAP_NOSYNC","","Causes dirtied data in the specified range to be flushed to disk only when necessary.",32,null],[18,"MAP_HASSEMAPHORE","","Region may contain semaphores.",32,null],[18,"MAP_STACK","","Region grows down, like a stack.",32,null],[11,"empty","","Returns an empty set of flags.",32,{"inputs":[],"output":{"name":"mapflags"}}],[11,"all","","Returns the set containing all flags.",32,{"inputs":[],"output":{"name":"mapflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",32,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",32,{"inputs":[{"name":"c_int"}],"output":{"generics":["mapflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",32,{"inputs":[{"name":"c_int"}],"output":{"name":"mapflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",32,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",32,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",32,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",32,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",32,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",32,{"inputs":[{"name":"self"},{"name":"mapflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",32,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"bitor_assign","","Adds the set of flags.",32,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",32,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",32,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",32,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",32,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",32,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",32,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",32,{"inputs":[{"name":"self"}],"output":{"name":"mapflags"}}],[11,"extend","","",32,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",32,{"inputs":[{"name":"t"}],"output":{"name":"mapflags"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"mmapadvise"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",30,null],[11,"cmp","","",30,{"inputs":[{"name":"self"},{"name":"mmapadvise"}],"output":{"name":"ordering"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"mmapadvise"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"self"},{"name":"mmapadvise"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"msflags"}}],[11,"partial_cmp","","",33,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",33,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"le","","",33,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"gt","","",33,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ge","","",33,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"cmp","","",33,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"ordering"}}],[11,"hash","","",33,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"MS_ASYNC","","Schedule an update but return immediately.",33,null],[18,"MS_INVALIDATE","","Invalidate all cached data.",33,null],[18,"MS_SYNC","","Perform an update and wait for it to complete.",33,null],[11,"empty","","Returns an empty set of flags.",33,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",33,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",33,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",33,{"inputs":[{"name":"c_int"}],"output":{"generics":["msflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",33,{"inputs":[{"name":"c_int"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",33,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",33,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",33,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",33,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",33,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",33,{"inputs":[{"name":"self"},{"name":"msflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",33,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitor_assign","","Adds the set of flags.",33,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",33,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",33,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",33,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",33,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",33,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",33,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",33,{"inputs":[{"name":"self"}],"output":{"name":"msflags"}}],[11,"extend","","",33,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",33,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"mlockallflags"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"mlockallflags"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"mlockallflags"}}],[11,"partial_cmp","","",34,{"inputs":[{"name":"self"},{"name":"mlockallflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",34,{"inputs":[{"name":"self"},{"name":"mlockallflags"}],"output":{"name":"bool"}}],[11,"le","","",34,{"inputs":[{"name":"self"},{"name":"mlockallflags"}],"output":{"name":"bool"}}],[11,"gt","","",34,{"inputs":[{"name":"self"},{"name":"mlockallflags"}],"output":{"name":"bool"}}],[11,"ge","","",34,{"inputs":[{"name":"self"},{"name":"mlockallflags"}],"output":{"name":"bool"}}],[11,"cmp","","",34,{"inputs":[{"name":"self"},{"name":"mlockallflags"}],"output":{"name":"ordering"}}],[11,"hash","","",34,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"MCL_CURRENT","","Lock pages that are currently mapped into the address space of the process.",34,null],[18,"MCL_FUTURE","","Lock pages which will become mapped into the address space of the process in the future.",34,null],[11,"empty","","Returns an empty set of flags.",34,{"inputs":[],"output":{"name":"mlockallflags"}}],[11,"all","","Returns the set containing all flags.",34,{"inputs":[],"output":{"name":"mlockallflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",34,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",34,{"inputs":[{"name":"c_int"}],"output":{"generics":["mlockallflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",34,{"inputs":[{"name":"c_int"}],"output":{"name":"mlockallflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",34,{"inputs":[{"name":"self"},{"name":"mlockallflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",34,{"inputs":[{"name":"self"},{"name":"mlockallflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",34,{"inputs":[{"name":"self"},{"name":"mlockallflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",34,{"inputs":[{"name":"self"},{"name":"mlockallflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",34,{"inputs":[{"name":"self"},{"name":"mlockallflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",34,{"inputs":[{"name":"self"},{"name":"mlockallflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",34,{"inputs":[{"name":"self"},{"name":"mlockallflags"}],"output":{"name":"mlockallflags"}}],[11,"bitor_assign","","Adds the set of flags.",34,{"inputs":[{"name":"self"},{"name":"mlockallflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",34,{"inputs":[{"name":"self"},{"name":"mlockallflags"}],"output":{"name":"mlockallflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",34,{"inputs":[{"name":"self"},{"name":"mlockallflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",34,{"inputs":[{"name":"self"},{"name":"mlockallflags"}],"output":{"name":"mlockallflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",34,{"inputs":[{"name":"self"},{"name":"mlockallflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",34,{"inputs":[{"name":"self"},{"name":"mlockallflags"}],"output":{"name":"mlockallflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",34,{"inputs":[{"name":"self"},{"name":"mlockallflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",34,{"inputs":[{"name":"self"}],"output":{"name":"mlockallflags"}}],[11,"extend","","",34,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",34,{"inputs":[{"name":"t"}],"output":{"name":"mlockallflags"}}],[0,"pthread","nix::sys","",null,null],[5,"pthread_self","nix::sys::pthread","Obtain ID of the calling thread (see `pthread_self(3)`",null,{"inputs":[],"output":{"name":"pthread"}}],[6,"Pthread","","",null,null],[0,"select","nix::sys","",null,null],[17,"FD_SETSIZE","nix::sys::select","",null,null],[3,"FdSet","","",null,null],[5,"select","","Monitors file descriptors for readiness",null,{"inputs":[{"name":"n"},{"name":"r"},{"name":"w"},{"name":"e"},{"name":"t"}],"output":{"generics":["c_int"],"name":"result"}}],[5,"pselect","","Monitors file descriptors for readiness with an altered signal mask.",null,{"inputs":[{"name":"n"},{"name":"r"},{"name":"w"},{"name":"e"},{"name":"t"},{"name":"s"}],"output":{"generics":["c_int"],"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"fdset"}}],[11,"new","","",35,{"inputs":[],"output":{"name":"fdset"}}],[11,"insert","","",35,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":null}],[11,"remove","","",35,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":null}],[11,"contains","","",35,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"bool"}}],[11,"clear","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"highest","","Finds the highest file descriptor in the set.",35,{"inputs":[{"name":"self"}],"output":{"generics":["rawfd"],"name":"option"}}],[0,"sendfile","nix::sys","",null,null],[3,"SfFlags","nix::sys::sendfile","Configuration options for `sendfile`.",null,null],[5,"sendfile","","Read up to `count` bytes from `in_fd` starting at `offset` and write to `out_sock`.",null,null],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"sfflags"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"sfflags"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"sfflags"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"self"},{"name":"sfflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",36,{"inputs":[{"name":"self"},{"name":"sfflags"}],"output":{"name":"bool"}}],[11,"le","","",36,{"inputs":[{"name":"self"},{"name":"sfflags"}],"output":{"name":"bool"}}],[11,"gt","","",36,{"inputs":[{"name":"self"},{"name":"sfflags"}],"output":{"name":"bool"}}],[11,"ge","","",36,{"inputs":[{"name":"self"},{"name":"sfflags"}],"output":{"name":"bool"}}],[11,"cmp","","",36,{"inputs":[{"name":"self"},{"name":"sfflags"}],"output":{"name":"ordering"}}],[11,"hash","","",36,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"SF_NODISKIO","","Causes `sendfile` to return EBUSY instead of blocking when attempting to read a busy page.",36,null],[18,"SF_SYNC","","Causes `sendfile` to sleep until the network stack releases its reference to the VM pages read. When `sendfile` returns, the data is not guaranteed to have been sent, but it is safe to modify the file.",36,null],[18,"SF_USER_READAHEAD","","Causes `sendfile` to cache exactly the number of pages specified in the `readahead` parameter, disabling caching heuristics.",36,null],[18,"SF_NOCACHE","","Causes `sendfile` not to cache the data read.",36,null],[11,"empty","","Returns an empty set of flags.",36,{"inputs":[],"output":{"name":"sfflags"}}],[11,"all","","Returns the set containing all flags.",36,{"inputs":[],"output":{"name":"sfflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",36,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",36,{"inputs":[{"name":"c_int"}],"output":{"generics":["sfflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",36,{"inputs":[{"name":"c_int"}],"output":{"name":"sfflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",36,{"inputs":[{"name":"self"},{"name":"sfflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",36,{"inputs":[{"name":"self"},{"name":"sfflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",36,{"inputs":[{"name":"self"},{"name":"sfflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",36,{"inputs":[{"name":"self"},{"name":"sfflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",36,{"inputs":[{"name":"self"},{"name":"sfflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",36,{"inputs":[{"name":"self"},{"name":"sfflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",36,{"inputs":[{"name":"self"},{"name":"sfflags"}],"output":{"name":"sfflags"}}],[11,"bitor_assign","","Adds the set of flags.",36,{"inputs":[{"name":"self"},{"name":"sfflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",36,{"inputs":[{"name":"self"},{"name":"sfflags"}],"output":{"name":"sfflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",36,{"inputs":[{"name":"self"},{"name":"sfflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",36,{"inputs":[{"name":"self"},{"name":"sfflags"}],"output":{"name":"sfflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",36,{"inputs":[{"name":"self"},{"name":"sfflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",36,{"inputs":[{"name":"self"},{"name":"sfflags"}],"output":{"name":"sfflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",36,{"inputs":[{"name":"self"},{"name":"sfflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",36,{"inputs":[{"name":"self"}],"output":{"name":"sfflags"}}],[11,"extend","","",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",36,{"inputs":[{"name":"t"}],"output":{"name":"sfflags"}}],[0,"signal","nix::sys","",null,null],[3,"SigEvent","nix::sys::signal","Used to request asynchronous notification of the completion of certain events, such as POSIX AIO and timers.",null,null],[3,"SignalIterator","","",null,null],[3,"SaFlags","","",null,null],[3,"SigSet","","",null,null],[3,"SigAction","","Action to take on receipt of a signal. Corresponds to `sigaction`.",null,null],[4,"Signal","","",null,null],[13,"SIGHUP","","",37,null],[13,"SIGINT","","",37,null],[13,"SIGQUIT","","",37,null],[13,"SIGILL","","",37,null],[13,"SIGTRAP","","",37,null],[13,"SIGABRT","","",37,null],[13,"SIGBUS","","",37,null],[13,"SIGFPE","","",37,null],[13,"SIGKILL","","",37,null],[13,"SIGUSR1","","",37,null],[13,"SIGSEGV","","",37,null],[13,"SIGUSR2","","",37,null],[13,"SIGPIPE","","",37,null],[13,"SIGALRM","","",37,null],[13,"SIGTERM","","",37,null],[13,"SIGCHLD","","",37,null],[13,"SIGCONT","","",37,null],[13,"SIGSTOP","","",37,null],[13,"SIGTSTP","","",37,null],[13,"SIGTTIN","","",37,null],[13,"SIGTTOU","","",37,null],[13,"SIGURG","","",37,null],[13,"SIGXCPU","","",37,null],[13,"SIGXFSZ","","",37,null],[13,"SIGVTALRM","","",37,null],[13,"SIGPROF","","",37,null],[13,"SIGWINCH","","",37,null],[13,"SIGIO","","",37,null],[13,"SIGSYS","","",37,null],[13,"SIGEMT","","",37,null],[13,"SIGINFO","","",37,null],[4,"SigmaskHow","","",null,null],[13,"SIG_BLOCK","","",38,null],[13,"SIG_UNBLOCK","","",38,null],[13,"SIG_SETMASK","","",38,null],[4,"SigHandler","","A signal handler.",null,null],[13,"SigDfl","","Default signal handling.",39,null],[13,"SigIgn","","Request that the signal be ignored.",39,null],[13,"Handler","","Use the given signal-catching function, which takes in the signal.",39,null],[13,"SigAction","","Use the given signal-catching function, which takes in the signal, information about how the signal was generated, and a pointer to the threads `ucontext_t`.",39,null],[4,"SigevNotify","","Used to request asynchronous notification of certain events, for example, with POSIX AIO, POSIX message queues, and POSIX timers.",null,null],[13,"SigevNone","","No notification will be delivered",40,null],[13,"SigevSignal","","The signal given by `signal` will be delivered to the process.  The value in `si_value` will be present in the `si_value` field of the `siginfo_t` structure of the queued signal.",40,null],[12,"signal","nix::sys::signal::SigevNotify","",40,null],[12,"si_value","","",40,null],[13,"SigevKevent","nix::sys::signal","A new `kevent` is posted to the kqueue `kq`.  The `kevent`'s `udata` field will contain the value in `udata`.",40,null],[12,"kq","nix::sys::signal::SigevNotify","",40,null],[12,"udata","","",40,null],[13,"SigevThreadId","nix::sys::signal","The signal `signal` is queued to the thread whose LWP ID is given in `thread_id`.  The value stored in `si_value` will be present in the `si_value` of the `siginfo_t` structure of the queued signal.",40,null],[12,"signal","nix::sys::signal::SigevNotify","",40,null],[12,"thread_id","","",40,null],[12,"si_value","","",40,null],[5,"sigaction","nix::sys::signal","Changes the action taken by a process on receipt of a specific signal.",null,{"inputs":[{"name":"signal"},{"name":"sigaction"}],"output":{"generics":["sigaction"],"name":"result"}}],[5,"pthread_sigmask","","Manages the signal mask (set of blocked signals) for the calling thread.",null,{"inputs":[{"name":"sigmaskhow"},{"generics":["sigset"],"name":"option"},{"generics":["sigset"],"name":"option"}],"output":{"name":"result"}}],[5,"sigprocmask","","Examine and change blocked signals.",null,{"inputs":[{"name":"sigmaskhow"},{"generics":["sigset"],"name":"option"},{"generics":["sigset"],"name":"option"}],"output":{"name":"result"}}],[5,"kill","","",null,{"inputs":[{"name":"pid"},{"name":"t"}],"output":{"name":"result"}}],[5,"raise","","",null,{"inputs":[{"name":"signal"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"new","","Note: this constructor does not allow the user to set the `sigev_notify_kevent_flags` field.  That's considered ok because on FreeBSD at least those flags don't do anything useful.  That field is part of a union that shares space with the more genuinely useful fields.",41,{"inputs":[{"name":"sigevnotify"}],"output":{"name":"sigevent"}}],[11,"sigevent","","",41,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",41,{"inputs":[{"name":"sigevent"}],"output":{"name":"self"}}],[6,"type_of_thread_id","","",null,null],[17,"NSIG","","",null,null],[17,"SIGIOT","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGUNUSED","","",null,null],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"signal"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",37,null],[11,"cmp","","",37,{"inputs":[{"name":"self"},{"name":"signal"}],"output":{"name":"ordering"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"signal"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",37,{"inputs":[{"name":"self"},{"name":"signal"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"signaliterator"}}],[11,"next","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["signal"],"name":"option"}}],[11,"iterator","","",37,{"inputs":[],"output":{"name":"signaliterator"}}],[11,"from_c_int","","",37,{"inputs":[{"name":"c_int"}],"output":{"generics":["signal"],"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"saflags"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",43,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"bool"}}],[11,"le","","",43,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"bool"}}],[11,"gt","","",43,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"bool"}}],[11,"ge","","",43,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"bool"}}],[11,"cmp","","",43,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"ordering"}}],[11,"hash","","",43,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"SA_NOCLDSTOP","","",43,null],[18,"SA_NOCLDWAIT","","",43,null],[18,"SA_NODEFER","","",43,null],[18,"SA_ONSTACK","","",43,null],[18,"SA_RESETHAND","","",43,null],[18,"SA_RESTART","","",43,null],[18,"SA_SIGINFO","","",43,null],[11,"empty","","Returns an empty set of flags.",43,{"inputs":[],"output":{"name":"saflags"}}],[11,"all","","Returns the set containing all flags.",43,{"inputs":[],"output":{"name":"saflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",43,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",43,{"inputs":[{"name":"c_int"}],"output":{"generics":["saflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",43,{"inputs":[{"name":"c_int"}],"output":{"name":"saflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",43,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",43,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",43,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",43,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",43,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",43,{"inputs":[{"name":"self"},{"name":"saflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",43,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"saflags"}}],[11,"bitor_assign","","Adds the set of flags.",43,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",43,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"saflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",43,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",43,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"saflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",43,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",43,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":{"name":"saflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",43,{"inputs":[{"name":"self"},{"name":"saflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",43,{"inputs":[{"name":"self"}],"output":{"name":"saflags"}}],[11,"extend","","",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",43,{"inputs":[{"name":"t"}],"output":{"name":"saflags"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"sigmaskhow"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",38,null],[11,"cmp","","",38,{"inputs":[{"name":"self"},{"name":"sigmaskhow"}],"output":{"name":"ordering"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"sigmaskhow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",38,{"inputs":[{"name":"self"},{"name":"sigmaskhow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"sigset"}}],[11,"all","","",44,{"inputs":[],"output":{"name":"sigset"}}],[11,"empty","","",44,{"inputs":[],"output":{"name":"sigset"}}],[11,"add","","",44,{"inputs":[{"name":"self"},{"name":"signal"}],"output":null}],[11,"clear","","",44,{"inputs":[{"name":"self"}],"output":null}],[11,"remove","","",44,{"inputs":[{"name":"self"},{"name":"signal"}],"output":null}],[11,"contains","","",44,{"inputs":[{"name":"self"},{"name":"signal"}],"output":{"name":"bool"}}],[11,"extend","","",44,{"inputs":[{"name":"self"},{"name":"sigset"}],"output":null}],[11,"thread_get_mask","","Gets the currently blocked (masked) set of signals for the calling thread.",44,{"inputs":[],"output":{"generics":["sigset"],"name":"result"}}],[11,"thread_set_mask","","Sets the set of signals as the signal mask for the calling thread.",44,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"thread_block","","Adds the set of signals to the signal mask for the calling thread.",44,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"thread_unblock","","Removes the set of signals from the signal mask for the calling thread.",44,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"thread_swap_mask","","Sets the set of signals as the signal mask, and returns the old mask.",44,{"inputs":[{"name":"self"},{"name":"sigmaskhow"}],"output":{"generics":["sigset"],"name":"result"}}],[11,"wait","","Suspends execution of the calling thread until one of the signals in the signal mask becomes pending, and returns the accepted signal.",44,{"inputs":[{"name":"self"}],"output":{"generics":["signal"],"name":"result"}}],[11,"as_ref","","",44,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"sighandler"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"sighandler"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"sighandler"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"new","","Creates a new action.",45,{"inputs":[{"name":"sighandler"},{"name":"saflags"},{"name":"sigset"}],"output":{"name":"sigaction"}}],[11,"flags","","Returns the flags set on the action.",45,{"inputs":[{"name":"self"}],"output":{"name":"saflags"}}],[11,"mask","","Returns the set of signals that are blocked during execution of the action's signal-catching function.",45,{"inputs":[{"name":"self"}],"output":{"name":"sigset"}}],[11,"handler","","Returns the action's handler.",45,{"inputs":[{"name":"self"}],"output":{"name":"sighandler"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"sigevnotify"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"sigevnotify"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"sigevnotify"}],"output":{"name":"bool"}}],[0,"socket","nix::sys","Socket interface functions",null,null],[3,"cmsghdr","nix::sys::socket","",null,null],[12,"cmsg_len","","",46,null],[12,"cmsg_level","","",46,null],[12,"cmsg_type","","",46,null],[3,"msghdr","","",null,null],[12,"msg_name","","",47,null],[12,"msg_namelen","","",47,null],[12,"msg_iov","","",47,null],[12,"msg_iovlen","","",47,null],[12,"msg_control","","",47,null],[12,"msg_controllen","","",47,null],[12,"msg_flags","","",47,null],[6,"sa_family_t","","",null,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",48,null],[12,"sa_family","","",48,null],[12,"sa_data","","",48,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",49,null],[12,"sin_family","","",49,null],[12,"sin_port","","",49,null],[12,"sin_addr","","",49,null],[12,"sin_zero","","",49,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",50,null],[12,"sin6_family","","",50,null],[12,"sin6_port","","",50,null],[12,"sin6_flowinfo","","",50,null],[12,"sin6_addr","","",50,null],[12,"sin6_scope_id","","",50,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",51,null],[12,"ss_family","","",51,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",52,null],[12,"sun_family","","",52,null],[12,"sun_path","","",52,null],[3,"UnixAddr","","A wrapper around `sockaddr_un`.",null,null],[12,"0","","",53,null],[12,"1","","",53,null],[3,"Ipv4Addr","","",null,null],[12,"0","","",54,null],[3,"Ipv6Addr","","",null,null],[12,"0","","",55,null],[3,"LinkAddr","","Hardware Address",null,null],[12,"0","","",56,null],[3,"SockFlag","","Additional socket options",null,null],[3,"MsgFlags","","Flags for send/recv and their relatives",null,null],[3,"IpMembershipRequest","","Request for multicast socket operations",null,null],[3,"Ipv6MembershipRequest","","Request for ipv6 multicast socket operations",null,null],[3,"CmsgSpace","","A structure used to make room in a cmsghdr passed to recvmsg. The size and alignment match that of a cmsghdr followed by a T, but the fields are not accessible, as the actual types will change on a call to recvmsg.",null,null],[3,"RecvMsg","","",null,null],[12,"bytes","","",57,null],[12,"address","","",57,null],[12,"flags","","",57,null],[3,"CmsgIterator","","",null,null],[4,"AddressFamily","","These constants specify the protocol family to be used in `socket` and `socketpair`",null,null],[13,"Unix","","Local communication (see `unix(7)`)",58,null],[13,"Inet","","IPv4 Internet protocols (see `ip(7)`)",58,null],[13,"Inet6","","IPv6 Internet protocols (see `ipv6(7)`)",58,null],[13,"Ipx","","IPX - Novell protocols",58,null],[13,"AppleTalk","","AppleTalk",58,null],[13,"Decnet","","",58,null],[13,"Sna","","",58,null],[13,"Bluetooth","","",58,null],[13,"Isdn","","",58,null],[13,"ImpLink","","",58,null],[13,"Pup","","",58,null],[13,"Chaos","","",58,null],[13,"Iso","","",58,null],[13,"Datakit","","",58,null],[13,"Ccitt","","",58,null],[13,"Dli","","",58,null],[13,"Lat","","",58,null],[13,"Hylink","","",58,null],[13,"Link","","",58,null],[13,"Coip","","",58,null],[13,"Cnt","","",58,null],[13,"Natm","","",58,null],[4,"SockAddr","","Represents a socket address",null,null],[13,"Inet","","",59,null],[13,"Unix","","",59,null],[13,"Link","","Datalink address (MAC)",59,null],[4,"InetAddr","","",null,null],[13,"V4","","",60,null],[13,"V6","","",60,null],[4,"IpAddr","","",null,null],[13,"V4","","",61,null],[13,"V6","","",61,null],[4,"SockType","","These constants are used to specify the communication semantics when creating a socket with `socket()`",null,null],[13,"Stream","","Provides sequenced, reliable, two-way, connection- based byte streams.  An out-of-band data transmission mechanism may be supported.",62,null],[13,"Datagram","","Supports datagrams (connectionless, unreliable messages of a fixed maximum length).",62,null],[13,"SeqPacket","","Provides a sequenced, reliable, two-way connection- based data transmission path for datagrams of fixed maximum length; a consumer is required to read an entire packet with each input system call.",62,null],[13,"Raw","","Provides raw network protocol access.",62,null],[13,"Rdm","","Provides a reliable datagram layer that does not guarantee ordering.",62,null],[4,"SockProtocol","","Constants used in `socket` and `socketpair` to specify the protocol to use.",null,null],[13,"Tcp","","TCP protocol (ip(7))",63,null],[13,"Udp","","UDP protocol (ip(7))",63,null],[4,"ControlMessage","","A type-safe wrapper around a single control message. More types may be added to this enum; do not exhaustively pattern-match it. Further reading",null,null],[13,"ScmRights","","A message of type `SCM_RIGHTS`, containing an array of file descriptors passed between processes.",64,null],[13,"ScmTimestamp","","A message of type `SCM_TIMESTAMP`, containing the time the packet was received by the kernel.",64,null],[4,"SockLevel","","The protocol level at which to get / set socket options. Used as an argument to `getsockopt` and `setsockopt`.",null,null],[13,"Socket","","",65,null],[13,"Tcp","","",65,null],[13,"Ip","","",65,null],[13,"Ipv6","","",65,null],[13,"Udp","","",65,null],[4,"Shutdown","","",null,null],[13,"Read","","Further receptions will be disallowed.",66,null],[13,"Write","","Further  transmissions will be disallowed.",66,null],[13,"Both","","Further receptions and transmissions will be disallowed.",66,null],[5,"sendmsg","","Send data in scatter-gather vectors to a socket, possibly accompanied by ancillary data. Optionally direct the message at the given address, as with sendto.",null,null],[5,"recvmsg","","Receive message in scatter-gather vectors from a socket, and optionally receive ancillary data into the provided buffer. If no ancillary data is desired, use () as the type parameter.",null,null],[5,"socket","","Create an endpoint for communication",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"sockflag"},{"name":"t"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"socketpair","","Create a pair of connected sockets",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"t"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"listen","","Listen for connections on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[5,"bind","","Bind a name to a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"accept","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"accept4","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockflag"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"connect","","Initiate a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"recv","","Receive data from a connection-oriented socket. Returns the number of bytes read",null,null],[5,"recvfrom","","Receive data from a connectionless or connection-oriented socket. Returns the number of bytes read and the socket address of the sender.",null,null],[5,"sendto","","Send a message to a socket",null,null],[5,"send","","Send data to a connection-oriented socket. Returns the number of bytes read",null,null],[5,"getsockopt","","Get the current value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"}],"output":{"name":"result"}}],[5,"setsockopt","","Sets the value for the requested socket option",null,null],[5,"getpeername","","Get the address of the peer connected to the socket `fd`.",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["sockaddr"],"name":"result"}}],[5,"getsockname","","Get the current address to which the socket `fd` is bound.",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["sockaddr"],"name":"result"}}],[5,"sockaddr_storage_to_addr","","Return the appropriate `SockAddr` type from a `sockaddr_storage` of a certain size.  In C this would usually be done by casting.  The `len` argument should be the number of bytes in the `sockaddr_storage` that are actually allocated and valid.  It must be at least as large as all the useful parts of the structure.  Note that in the case of a `sockaddr_un`, `len` need not include the terminating null.",null,{"inputs":[{"name":"sockaddr_storage"},{"name":"usize"}],"output":{"generics":["sockaddr"],"name":"result"}}],[5,"shutdown","","Shut down part of a full-duplex connection.",null,{"inputs":[{"name":"rawfd"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"linkaddr"}}],[11,"len","","Total length of sockaddr",56,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"family","","always == AF_LINK",56,{"inputs":[{"name":"self"}],"output":{"name":"addressfamily"}}],[11,"ifindex","","interface index, if != 0, system given index for interface",56,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"datalink_type","","Datalink type",56,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"nlen","","",56,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"alen","","link level address length",56,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"slen","","link layer selector length",56,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","if link level address length == 0, or `sdl_data` not be larger.",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"addr","","Physical-layer address (MAC)",56,null],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",56,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"addressfamily"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"addressfamily"}],"output":{"name":"bool"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",58,null],[11,"from_i32","","Create a new `AddressFamily` from an integer value retrieved from `libc`, usually from the `sa_family` field of a `sockaddr`.",58,{"inputs":[{"name":"i32"}],"output":{"generics":["addressfamily"],"name":"option"}}],[11,"from_std","","",60,{"inputs":[{"name":"socketaddr"}],"output":{"name":"inetaddr"}}],[11,"new","","",60,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",60,{"inputs":[{"name":"self"}],"output":{"name":"ipaddr"}}],[11,"port","","Gets the port number associated with this socket address",60,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"to_std","","",60,{"inputs":[{"name":"self"}],"output":{"name":"socketaddr"}}],[11,"to_str","","",60,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"inetaddr"}],"output":{"name":"bool"}}],[11,"hash","","",60,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"inetaddr"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"ipaddr"}}],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",61,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipaddr"}}],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",61,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",54,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"from_std","","",54,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"any","","",54,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"octets","","",54,null],[11,"to_std","","",54,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",54,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"new","","",55,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"from_std","","",55,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",55,null],[11,"to_std","","",55,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new sockaddr_un representing a filesystem path.",53,{"inputs":[{"name":"p"}],"output":{"generics":["unixaddr"],"name":"result"}}],[11,"path","","If this address represents a filesystem path, return that path.",53,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"unixaddr"}],"output":{"name":"bool"}}],[11,"hash","","",53,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"unixaddr"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_inet","","",59,{"inputs":[{"name":"inetaddr"}],"output":{"name":"sockaddr"}}],[11,"new_unix","","",59,{"inputs":[{"name":"p"}],"output":{"generics":["sockaddr"],"name":"result"}}],[11,"family","","",59,{"inputs":[{"name":"self"}],"output":{"name":"addressfamily"}}],[11,"to_str","","",59,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"from_libc_sockaddr","","Creates a `SockAddr` struct from libc's sockaddr.",59,null],[11,"as_ffi_pair","","Conversion from nix's SockAddr type to the underlying libc sockaddr type.",59,null],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"sockaddr"}],"output":{"name":"bool"}}],[11,"hash","","",59,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"sockopt","","",null,null],[3,"ReuseAddr","nix::sys::socket::sockopt","",null,null],[3,"ReusePort","","",null,null],[3,"TcpNoDelay","","",null,null],[3,"Linger","","",null,null],[3,"IpAddMembership","","",null,null],[3,"IpDropMembership","","",null,null],[3,"Ipv6AddMembership","","",null,null],[3,"Ipv6DropMembership","","",null,null],[3,"IpMulticastTtl","","",null,null],[3,"IpMulticastLoop","","",null,null],[3,"ReceiveTimeout","","",null,null],[3,"SendTimeout","","",null,null],[3,"Broadcast","","",null,null],[3,"OobInline","","",null,null],[3,"SocketError","","",null,null],[3,"KeepAlive","","",null,null],[3,"TcpKeepIdle","","",null,null],[3,"RcvBuf","","",null,null],[3,"SndBuf","","",null,null],[3,"SockType","","",null,null],[3,"AcceptConn","","",null,null],[3,"ReceiveTimestamp","","",null,null],[3,"BindAny","","",null,null],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"reuseaddr"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",67,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",67,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"reuseport"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",68,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",68,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"tcpnodelay"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",69,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",69,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",70,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"linger"}],"output":{"name":"result"}}],[11,"get","","",70,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["linger"],"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"ipaddmembership"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",71,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"ipmembershiprequest"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"ipdropmembership"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",72,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"ipmembershiprequest"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addmembership"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",73,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"ipv6membershiprequest"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"ipv6dropmembership"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",74,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"ipv6membershiprequest"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"ipmulticastttl"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",75,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"u8"}],"output":{"name":"result"}}],[11,"get","","",75,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["u8"],"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"ipmulticastloop"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",76,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",76,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"receivetimeout"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",77,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"get","","",77,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["timeval"],"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"sendtimeout"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",78,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"get","","",78,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["timeval"],"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"broadcast"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",79,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",79,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"oobinline"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",80,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",80,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"socketerror"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",81,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["i32"],"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"keepalive"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",82,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",82,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"tcpkeepidle"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",83,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get","","",83,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["u32"],"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"rcvbuf"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",84,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[11,"get","","",84,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["usize"],"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"sndbuf"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",85,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[11,"get","","",85,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["usize"],"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"socktype"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",86,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["socktype"],"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"acceptconn"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",87,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"receivetimestamp"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",88,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",88,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"bindany"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",89,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",89,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[8,"GetSockOpt","nix::sys::socket","Represents a socket option that can be accessed or set. Used as an argument to `getsockopt`",null,null],[16,"Val","","",90,null],[8,"SetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument to `setsockopt`",null,null],[16,"Val","","",91,null],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"socktype"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"sockprotocol"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",63,null],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"sockprotocol"}],"output":{"name":"bool"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"sockflag"}}],[11,"partial_cmp","","",92,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",92,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"le","","",92,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"gt","","",92,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ge","","",92,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"cmp","","",92,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"ordering"}}],[11,"hash","","",92,null],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"SOCK_NONBLOCK","","Set non-blocking mode on the new socket",92,null],[18,"SOCK_CLOEXEC","","Set close-on-exec on the new descriptor",92,null],[11,"empty","","Returns an empty set of flags.",92,{"inputs":[],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",92,{"inputs":[],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",92,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",92,{"inputs":[{"name":"c_int"}],"output":{"generics":["sockflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",92,{"inputs":[{"name":"c_int"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",92,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",92,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",92,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",92,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",92,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",92,{"inputs":[{"name":"self"},{"name":"sockflag"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",92,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitor_assign","","Adds the set of flags.",92,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",92,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",92,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",92,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",92,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",92,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",92,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",92,{"inputs":[{"name":"self"}],"output":{"name":"sockflag"}}],[11,"extend","","",92,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",92,{"inputs":[{"name":"t"}],"output":{"name":"sockflag"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"msgflags"}}],[11,"partial_cmp","","",93,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",93,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"le","","",93,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"gt","","",93,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"ge","","",93,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"cmp","","",93,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"ordering"}}],[11,"hash","","",93,null],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"MSG_OOB","","Sends or requests out-of-band data on sockets that support this notion (e.g., of type `Stream`); the underlying protocol must also support out-of-band data.",93,null],[18,"MSG_PEEK","","Peeks at an incoming message. The data is treated as unread and the next `recv()` or similar function shall still return this data.",93,null],[18,"MSG_DONTWAIT","","Enables nonblocking operation; if the operation would block, `EAGAIN` or `EWOULDBLOCK` is returned.  This provides similar behavior to setting the `O_NONBLOCK` flag (via the `fcntl` `F_SETFL` operation), but differs in that `MSG_DONTWAIT` is a per- call option, whereas `O_NONBLOCK` is a setting on the open file description (see open(2)), which will affect all threads in the calling process and as well as other processes that hold file descriptors referring to the same open file description.",93,null],[18,"MSG_CTRUNC","","Receive flags: Control Data was discarded (buffer too small)",93,null],[18,"MSG_TRUNC","","For raw (`Packet`), Internet datagram (since Linux 2.4.27/2.6.8), netlink (since Linux 2.6.22) and UNIX datagram (since Linux 3.4) sockets: return the real length of the packet or datagram, even when it was longer than the passed buffer. Not implemented for UNIX domain (unix(7)) sockets.",93,null],[18,"MSG_EOR","","Terminates a record (when this notion is supported, as for sockets of type `SeqPacket`).",93,null],[18,"MSG_CMSG_CLOEXEC","","Set the `close-on-exec` flag for the file descriptor received via a UNIX domain file descriptor using the `SCM_RIGHTS` operation (described in unix(7)). This flag is useful for the same reasons as the `O_CLOEXEC` flag of open(2).",93,null],[11,"empty","","Returns an empty set of flags.",93,{"inputs":[],"output":{"name":"msgflags"}}],[11,"all","","Returns the set containing all flags.",93,{"inputs":[],"output":{"name":"msgflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",93,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",93,{"inputs":[{"name":"c_int"}],"output":{"generics":["msgflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",93,{"inputs":[{"name":"c_int"}],"output":{"name":"msgflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",93,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",93,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",93,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",93,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",93,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",93,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",93,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",93,{"inputs":[{"name":"self"},{"name":"msgflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",93,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"bitor_assign","","Adds the set of flags.",93,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",93,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",93,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",93,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",93,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",93,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",93,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",93,{"inputs":[{"name":"self"}],"output":{"name":"msgflags"}}],[11,"extend","","",93,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",93,{"inputs":[{"name":"t"}],"output":{"name":"msgflags"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"ipmembershiprequest"}}],[11,"new","","Instantiate a new `IpMembershipRequest`",94,{"inputs":[{"name":"ipv4addr"},{"generics":["ipv4addr"],"name":"option"}],"output":{"name":"self"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"ipv6membershiprequest"}}],[11,"new","","Instantiate a new `Ipv6MembershipRequest`",95,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"self"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a CmsgSpace. The structure is used only for space, so the fields are uninitialized.",96,{"inputs":[],"output":{"name":"self"}}],[11,"cmsgs","","Iterate over the valid control messages pointed to by this msghdr.",57,{"inputs":[{"name":"self"}],"output":{"name":"cmsgiterator"}}],[11,"next","","",97,{"inputs":[{"name":"self"}],"output":{"generics":["controlmessage"],"name":"option"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"socklevel"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",65,null],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"socklevel"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",66,null],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"bool"}}],[0,"stat","nix::sys","",null,null],[6,"dev_t","nix::sys::stat","",null,null],[3,"FileStat","","",null,null],[12,"st_dev","","",98,null],[12,"st_ino","","",98,null],[12,"st_mode","","",98,null],[12,"st_nlink","","",98,null],[12,"st_uid","","",98,null],[12,"st_gid","","",98,null],[12,"st_rdev","","",98,null],[12,"st_atime","","",98,null],[12,"st_atime_nsec","","",98,null],[12,"st_mtime","","",98,null],[12,"st_mtime_nsec","","",98,null],[12,"st_ctime","","",98,null],[12,"st_ctime_nsec","","",98,null],[12,"st_size","","",98,null],[12,"st_blocks","","",98,null],[12,"st_blksize","","",98,null],[12,"st_flags","","",98,null],[12,"st_gen","","",98,null],[12,"st_lspare","","",98,null],[12,"st_birthtime","","",98,null],[12,"st_birthtime_nsec","","",98,null],[3,"SFlag","","",null,null],[3,"Mode","","",null,null],[4,"FchmodatFlags","","Flags for `fchmodat` function.",null,null],[13,"FollowSymlink","","",99,null],[13,"NoFollowSymlink","","",99,null],[5,"mknod","","",null,{"inputs":[{"name":"p"},{"name":"sflag"},{"name":"mode"},{"name":"dev_t"}],"output":{"name":"result"}}],[5,"umask","","",null,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[5,"stat","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["filestat"],"name":"result"}}],[5,"lstat","","",null,{"inputs":[{"name":"p"}],"output":{"generics":["filestat"],"name":"result"}}],[5,"fstat","","",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["filestat"],"name":"result"}}],[5,"fstatat","","",null,{"inputs":[{"name":"rawfd"},{"name":"p"},{"name":"atflags"}],"output":{"generics":["filestat"],"name":"result"}}],[5,"fchmod","","Change the file permission bits of the file specified by a file descriptor.",null,{"inputs":[{"name":"rawfd"},{"name":"mode"}],"output":{"name":"result"}}],[5,"fchmodat","","Change the file permission bits.",null,{"inputs":[{"generics":["rawfd"],"name":"option"},{"name":"p"},{"name":"mode"},{"name":"fchmodatflags"}],"output":{"name":"result"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"sflag"}}],[11,"partial_cmp","","",100,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",100,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"le","","",100,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"gt","","",100,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ge","","",100,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"cmp","","",100,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"ordering"}}],[11,"hash","","",100,null],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"S_IFIFO","","",100,null],[18,"S_IFCHR","","",100,null],[18,"S_IFDIR","","",100,null],[18,"S_IFBLK","","",100,null],[18,"S_IFREG","","",100,null],[18,"S_IFLNK","","",100,null],[18,"S_IFSOCK","","",100,null],[18,"S_IFMT","","",100,null],[11,"empty","","Returns an empty set of flags.",100,{"inputs":[],"output":{"name":"sflag"}}],[11,"all","","Returns the set containing all flags.",100,{"inputs":[],"output":{"name":"sflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",100,{"inputs":[{"name":"self"}],"output":{"name":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",100,{"inputs":[{"name":"mode_t"}],"output":{"generics":["sflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",100,{"inputs":[{"name":"mode_t"}],"output":{"name":"sflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",100,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",100,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",100,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",100,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",100,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",100,{"inputs":[{"name":"self"},{"name":"sflag"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",100,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitor_assign","","Adds the set of flags.",100,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",100,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",100,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",100,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",100,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",100,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",100,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",100,{"inputs":[{"name":"self"}],"output":{"name":"sflag"}}],[11,"extend","","",100,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",100,{"inputs":[{"name":"t"}],"output":{"name":"sflag"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"partial_cmp","","",101,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",101,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"le","","",101,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"gt","","",101,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ge","","",101,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"cmp","","",101,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"ordering"}}],[11,"hash","","",101,null],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"S_IRWXU","","",101,null],[18,"S_IRUSR","","",101,null],[18,"S_IWUSR","","",101,null],[18,"S_IXUSR","","",101,null],[18,"S_IRWXG","","",101,null],[18,"S_IRGRP","","",101,null],[18,"S_IWGRP","","",101,null],[18,"S_IXGRP","","",101,null],[18,"S_IRWXO","","",101,null],[18,"S_IROTH","","",101,null],[18,"S_IWOTH","","",101,null],[18,"S_IXOTH","","",101,null],[18,"S_ISUID","","",101,null],[18,"S_ISGID","","",101,null],[18,"S_ISVTX","","",101,null],[11,"empty","","Returns an empty set of flags.",101,{"inputs":[],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",101,{"inputs":[],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",101,{"inputs":[{"name":"self"}],"output":{"name":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",101,{"inputs":[{"name":"mode_t"}],"output":{"generics":["mode"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",101,{"inputs":[{"name":"mode_t"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",101,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",101,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",101,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",101,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",101,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",101,{"inputs":[{"name":"self"},{"name":"mode"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",101,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitor_assign","","Adds the set of flags.",101,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",101,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitxor_assign","","Toggles the set of flags.",101,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",101,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",101,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",101,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"sub_assign","","Disables all flags enabled in the set.",101,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",101,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"extend","","",101,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",101,{"inputs":[{"name":"t"}],"output":{"name":"mode"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"fchmodatflags"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"statvfs","nix::sys","Get filesystem statistics",null,null],[3,"FsFlags","nix::sys::statvfs","File system mount Flags",null,null],[3,"Statvfs","","Wrapper around the POSIX `statvfs` struct",null,null],[5,"statvfs","","Return a `Statvfs` object with information about the `path`",null,{"inputs":[{"name":"p"}],"output":{"generics":["statvfs"],"name":"result"}}],[5,"fstatvfs","","Return a `Statvfs` object with information about `fd`",null,{"inputs":[{"name":"t"}],"output":{"generics":["statvfs"],"name":"result"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"fsflags"}}],[11,"partial_cmp","","",102,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",102,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"le","","",102,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"gt","","",102,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"ge","","",102,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"cmp","","",102,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"ordering"}}],[11,"hash","","",102,null],[11,"default","","",102,{"inputs":[],"output":{"name":"fsflags"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"ST_RDONLY","","Read Only",102,null],[18,"ST_NOSUID","","Do not allow the set-uid bits to have an effect",102,null],[11,"empty","","Returns an empty set of flags.",102,{"inputs":[],"output":{"name":"fsflags"}}],[11,"all","","Returns the set containing all flags.",102,{"inputs":[],"output":{"name":"fsflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",102,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",102,{"inputs":[{"name":"c_ulong"}],"output":{"generics":["fsflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",102,{"inputs":[{"name":"c_ulong"}],"output":{"name":"fsflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",102,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",102,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",102,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",102,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",102,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",102,{"inputs":[{"name":"self"},{"name":"fsflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",102,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bitor_assign","","Adds the set of flags.",102,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",102,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",102,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",102,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",102,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",102,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",102,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",102,{"inputs":[{"name":"self"}],"output":{"name":"fsflags"}}],[11,"extend","","",102,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",102,{"inputs":[{"name":"t"}],"output":{"name":"fsflags"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"block_size","","get the file system block size",103,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"fragment_size","","Get the fundamental file system block size",103,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"blocks","","Get the number of blocks.",103,{"inputs":[{"name":"self"}],"output":{"name":"fsblkcnt_t"}}],[11,"blocks_free","","Get the number of free blocks in the file system",103,{"inputs":[{"name":"self"}],"output":{"name":"fsblkcnt_t"}}],[11,"blocks_available","","Get the number of free blocks for unprivileged users",103,{"inputs":[{"name":"self"}],"output":{"name":"fsblkcnt_t"}}],[11,"files","","Get the total number of file inodes",103,{"inputs":[{"name":"self"}],"output":{"name":"fsfilcnt_t"}}],[11,"files_free","","Get the number of free file inodes",103,{"inputs":[{"name":"self"}],"output":{"name":"fsfilcnt_t"}}],[11,"files_available","","Get the number of free file inodes for unprivileged users",103,{"inputs":[{"name":"self"}],"output":{"name":"fsfilcnt_t"}}],[11,"filesystem_id","","Get the file system id",103,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"flags","","Get the mount flags",103,{"inputs":[{"name":"self"}],"output":{"name":"fsflags"}}],[11,"name_max","","Get the maximum filename length",103,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[0,"termios","nix::sys","An interface for controlling asynchronous communication ports",null,null],[17,"NCCS","nix::sys::termios","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[3,"Termios","","Stores settings for the termios API",null,null],[12,"input_flags","","Input mode flags (see `termios.c_iflag` documentation)",104,null],[12,"output_flags","","Output mode flags (see `termios.c_oflag` documentation)",104,null],[12,"control_flags","","Control mode flags (see `termios.c_cflag` documentation)",104,null],[12,"local_flags","","Local mode flags (see `termios.c_lflag` documentation)",104,null],[12,"control_chars","","Control characters (see `termios.c_cc` documentation)",104,null],[3,"InputFlags","","Flags for configuring the input mode of a terminal",null,null],[3,"OutputFlags","","Flags for configuring the output mode of a terminal",null,null],[3,"ControlFlags","","Flags for setting the control mode of a terminal",null,null],[3,"LocalFlags","","Flags for setting any local modes",null,null],[4,"BaudRate","","Baud rates supported by the system.",null,null],[13,"B0","","",105,null],[13,"B50","","",105,null],[13,"B75","","",105,null],[13,"B110","","",105,null],[13,"B134","","",105,null],[13,"B150","","",105,null],[13,"B200","","",105,null],[13,"B300","","",105,null],[13,"B600","","",105,null],[13,"B1200","","",105,null],[13,"B1800","","",105,null],[13,"B2400","","",105,null],[13,"B4800","","",105,null],[13,"B7200","","",105,null],[13,"B9600","","",105,null],[13,"B14400","","",105,null],[13,"B19200","","",105,null],[13,"B28800","","",105,null],[13,"B38400","","",105,null],[13,"B57600","","",105,null],[13,"B76800","","",105,null],[13,"B115200","","",105,null],[13,"B230400","","",105,null],[13,"B460800","","",105,null],[13,"B921600","","",105,null],[4,"SetArg","","Specify when a port configuration change should occur.",null,null],[13,"TCSANOW","","The change will occur immediately",106,null],[13,"TCSADRAIN","","The change occurs after all output has been written",106,null],[13,"TCSAFLUSH","","Same as `TCSADRAIN`, but will also flush the input buffer",106,null],[4,"FlushArg","","Specify a combination of the input and output buffers to flush",null,null],[13,"TCIFLUSH","","Flush data that was received but not read",107,null],[13,"TCOFLUSH","","Flush data written but not transmitted",107,null],[13,"TCIOFLUSH","","Flush both received data not read and written data not transmitted",107,null],[4,"FlowArg","","Specify how transmission flow should be altered",null,null],[13,"TCOOFF","","Suspend transmission",108,null],[13,"TCOON","","Resume transmission",108,null],[13,"TCIOFF","","Transmit a STOP character, which should disable a connected terminal device",108,null],[13,"TCION","","Transmit a START character, which should re-enable a connected terminal device",108,null],[4,"SpecialCharacterIndices","","Indices into the `termios.c_cc` array for special characters.",null,null],[13,"VDISCARD","","",109,null],[13,"VDSUSP","","",109,null],[13,"VEOF","","",109,null],[13,"VEOL","","",109,null],[13,"VEOL2","","",109,null],[13,"VERASE","","",109,null],[13,"VERASE2","","",109,null],[13,"VINTR","","",109,null],[13,"VKILL","","",109,null],[13,"VLNEXT","","",109,null],[13,"VMIN","","",109,null],[13,"VQUIT","","",109,null],[13,"VREPRINT","","",109,null],[13,"VSTART","","",109,null],[13,"VSTATUS","","",109,null],[13,"VSTOP","","",109,null],[13,"VSUSP","","",109,null],[13,"VTIME","","",109,null],[13,"VWERASE","","",109,null],[5,"cfgetispeed","","Get input baud rate (see cfgetispeed(3p)).",null,{"inputs":[{"name":"termios"}],"output":{"name":"u32"}}],[5,"cfgetospeed","","Get output baud rate (see cfgetospeed(3p)).",null,{"inputs":[{"name":"termios"}],"output":{"name":"u32"}}],[5,"cfsetispeed","","Set input baud rate (see cfsetispeed(3p)).",null,{"inputs":[{"name":"termios"},{"name":"t"}],"output":{"name":"result"}}],[5,"cfsetospeed","","Set output baud rate (see cfsetospeed(3p)).",null,{"inputs":[{"name":"termios"},{"name":"t"}],"output":{"name":"result"}}],[5,"cfsetspeed","","Set both the input and output baud rates (see termios(3)).",null,{"inputs":[{"name":"termios"},{"name":"t"}],"output":{"name":"result"}}],[5,"cfmakeraw","","Configures the port to something like the \"raw\" mode of the old Version 7 terminal driver (see termios(3)).",null,{"inputs":[{"name":"termios"}],"output":null}],[5,"cfmakesane","","Configures the port to \"sane\" mode (like the configuration of a newly created terminal) (see tcsetattr(3)).",null,{"inputs":[{"name":"termios"}],"output":null}],[5,"tcgetattr","","Return the configuration of a port tcgetattr(3p)).",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["termios"],"name":"result"}}],[5,"tcsetattr","","Set the configuration for a terminal (see tcsetattr(3p)).",null,{"inputs":[{"name":"rawfd"},{"name":"setarg"},{"name":"termios"}],"output":{"name":"result"}}],[5,"tcdrain","","Block until all output data is written (see tcdrain(3p)).",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcflow","","Suspend or resume the transmission or reception of data (see tcflow(3p)).",null,{"inputs":[{"name":"rawfd"},{"name":"flowarg"}],"output":{"name":"result"}}],[5,"tcflush","","Discard data in the output or input queue (see tcflush(3p)).",null,{"inputs":[{"name":"rawfd"},{"name":"flusharg"}],"output":{"name":"result"}}],[5,"tcsendbreak","","Send a break for a specific duration (see tcsendbreak(3p)).",null,{"inputs":[{"name":"rawfd"},{"name":"c_int"}],"output":{"name":"result"}}],[5,"tcgetsid","","Get the session controlled by the given terminal (see tcgetsid(3)).",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["pid"],"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"from","","",104,{"inputs":[{"name":"termios"}],"output":{"name":"self"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"baudrate"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",105,null],[11,"cmp","","",105,{"inputs":[{"name":"self"},{"name":"baudrate"}],"output":{"name":"ordering"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"baudrate"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",105,{"inputs":[{"name":"self"},{"name":"baudrate"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"from","","",105,{"inputs":[{"name":"speed_t"}],"output":{"name":"baudrate"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"setarg"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",106,null],[11,"cmp","","",106,{"inputs":[{"name":"self"},{"name":"setarg"}],"output":{"name":"ordering"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"setarg"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",106,{"inputs":[{"name":"self"},{"name":"setarg"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"flusharg"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",107,null],[11,"cmp","","",107,{"inputs":[{"name":"self"},{"name":"flusharg"}],"output":{"name":"ordering"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"flusharg"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",107,{"inputs":[{"name":"self"},{"name":"flusharg"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"flowarg"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",108,null],[11,"cmp","","",108,{"inputs":[{"name":"self"},{"name":"flowarg"}],"output":{"name":"ordering"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"flowarg"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",108,{"inputs":[{"name":"self"},{"name":"flowarg"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"specialcharacterindices"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",109,null],[11,"cmp","","",109,{"inputs":[{"name":"self"},{"name":"specialcharacterindices"}],"output":{"name":"ordering"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"specialcharacterindices"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",109,{"inputs":[{"name":"self"},{"name":"specialcharacterindices"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"inputflags"}}],[11,"partial_cmp","","",110,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",110,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"le","","",110,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"gt","","",110,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ge","","",110,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"cmp","","",110,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"ordering"}}],[11,"hash","","",110,null],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"IGNBRK","","",110,null],[18,"BRKINT","","",110,null],[18,"IGNPAR","","",110,null],[18,"PARMRK","","",110,null],[18,"INPCK","","",110,null],[18,"ISTRIP","","",110,null],[18,"INLCR","","",110,null],[18,"IGNCR","","",110,null],[18,"ICRNL","","",110,null],[18,"IXON","","",110,null],[18,"IXOFF","","",110,null],[18,"IXANY","","",110,null],[18,"IMAXBEL","","",110,null],[11,"empty","","Returns an empty set of flags.",110,{"inputs":[],"output":{"name":"inputflags"}}],[11,"all","","Returns the set containing all flags.",110,{"inputs":[],"output":{"name":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",110,{"inputs":[{"name":"self"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",110,{"inputs":[{"name":"tcflag_t"}],"output":{"generics":["inputflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",110,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",110,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",110,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",110,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",110,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",110,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",110,{"inputs":[{"name":"self"},{"name":"inputflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",110,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitor_assign","","Adds the set of flags.",110,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",110,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",110,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",110,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",110,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",110,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",110,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",110,{"inputs":[{"name":"self"}],"output":{"name":"inputflags"}}],[11,"extend","","",110,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",110,{"inputs":[{"name":"t"}],"output":{"name":"inputflags"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"outputflags"}}],[11,"partial_cmp","","",111,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",111,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"le","","",111,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"gt","","",111,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ge","","",111,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"cmp","","",111,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"ordering"}}],[11,"hash","","",111,null],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"OPOST","","",111,null],[18,"ONLCR","","",111,null],[18,"OCRNL","","",111,null],[18,"ONOCR","","",111,null],[18,"ONLRET","","",111,null],[18,"TAB0","","",111,null],[18,"TAB3","","",111,null],[18,"OXTABS","","",111,null],[18,"ONOEOT","","",111,null],[18,"TABDLY","","",111,null],[11,"empty","","Returns an empty set of flags.",111,{"inputs":[],"output":{"name":"outputflags"}}],[11,"all","","Returns the set containing all flags.",111,{"inputs":[],"output":{"name":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",111,{"inputs":[{"name":"self"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",111,{"inputs":[{"name":"tcflag_t"}],"output":{"generics":["outputflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",111,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",111,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",111,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",111,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",111,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",111,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",111,{"inputs":[{"name":"self"},{"name":"outputflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",111,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitor_assign","","Adds the set of flags.",111,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",111,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",111,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",111,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",111,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",111,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",111,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",111,{"inputs":[{"name":"self"}],"output":{"name":"outputflags"}}],[11,"extend","","",111,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",111,{"inputs":[{"name":"t"}],"output":{"name":"outputflags"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"controlflags"}}],[11,"partial_cmp","","",112,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",112,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"le","","",112,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"gt","","",112,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ge","","",112,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"cmp","","",112,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"ordering"}}],[11,"hash","","",112,null],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"CIGNORE","","",112,null],[18,"CS5","","",112,null],[18,"CS6","","",112,null],[18,"CS7","","",112,null],[18,"CS8","","",112,null],[18,"CSTOPB","","",112,null],[18,"CREAD","","",112,null],[18,"PARENB","","",112,null],[18,"PARODD","","",112,null],[18,"HUPCL","","",112,null],[18,"CLOCAL","","",112,null],[18,"CRTSCTS","","",112,null],[18,"MDMBUF","","",112,null],[18,"CCTS_OFLOW","","",112,null],[18,"CRTS_IFLOW","","",112,null],[18,"CDTR_IFLOW","","",112,null],[18,"CDSR_OFLOW","","",112,null],[18,"CCAR_OFLOW","","",112,null],[18,"CSIZE","","",112,null],[11,"empty","","Returns an empty set of flags.",112,{"inputs":[],"output":{"name":"controlflags"}}],[11,"all","","Returns the set containing all flags.",112,{"inputs":[],"output":{"name":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",112,{"inputs":[{"name":"self"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",112,{"inputs":[{"name":"tcflag_t"}],"output":{"generics":["controlflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",112,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",112,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",112,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",112,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",112,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",112,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",112,{"inputs":[{"name":"self"},{"name":"controlflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",112,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitor_assign","","Adds the set of flags.",112,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",112,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",112,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",112,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",112,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",112,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",112,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",112,{"inputs":[{"name":"self"}],"output":{"name":"controlflags"}}],[11,"extend","","",112,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",112,{"inputs":[{"name":"t"}],"output":{"name":"controlflags"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"localflags"}}],[11,"partial_cmp","","",113,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",113,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"le","","",113,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"gt","","",113,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ge","","",113,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"cmp","","",113,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"ordering"}}],[11,"hash","","",113,null],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"ECHOKE","","",113,null],[18,"ECHOE","","",113,null],[18,"ECHOK","","",113,null],[18,"ECHO","","",113,null],[18,"ECHONL","","",113,null],[18,"ECHOPRT","","",113,null],[18,"ECHOCTL","","",113,null],[18,"ISIG","","",113,null],[18,"ICANON","","",113,null],[18,"ALTWERASE","","",113,null],[18,"IEXTEN","","",113,null],[18,"EXTPROC","","",113,null],[18,"TOSTOP","","",113,null],[18,"FLUSHO","","",113,null],[18,"NOKERNINFO","","",113,null],[18,"PENDIN","","",113,null],[18,"NOFLSH","","",113,null],[11,"empty","","Returns an empty set of flags.",113,{"inputs":[],"output":{"name":"localflags"}}],[11,"all","","Returns the set containing all flags.",113,{"inputs":[],"output":{"name":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",113,{"inputs":[{"name":"self"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",113,{"inputs":[{"name":"tcflag_t"}],"output":{"generics":["localflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",113,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",113,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",113,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",113,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",113,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",113,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",113,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",113,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",113,{"inputs":[{"name":"self"},{"name":"localflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",113,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitor_assign","","Adds the set of flags.",113,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",113,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",113,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",113,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",113,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",113,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",113,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",113,{"inputs":[{"name":"self"}],"output":{"name":"localflags"}}],[11,"extend","","",113,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",113,{"inputs":[{"name":"t"}],"output":{"name":"localflags"}}],[0,"time","nix::sys","",null,null],[3,"TimeSpec","nix::sys::time","",null,null],[3,"TimeVal","","",null,null],[8,"TimeValLike","","",null,null],[11,"zero","","",114,{"inputs":[],"output":{"name":"self"}}],[11,"hours","","",114,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"minutes","","",114,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[10,"seconds","","",114,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[10,"milliseconds","","",114,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[10,"microseconds","","",114,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[10,"nanoseconds","","",114,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"num_hours","","",114,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","",114,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"num_seconds","","",114,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"num_milliseconds","","",114,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"num_microseconds","","",114,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[10,"num_nanoseconds","","",114,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"as_ref","","",115,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"cmp","","",115,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",115,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"seconds","","",115,{"inputs":[{"name":"i64"}],"output":{"name":"timespec"}}],[11,"milliseconds","","",115,{"inputs":[{"name":"i64"}],"output":{"name":"timespec"}}],[11,"microseconds","","Makes a new `TimeSpec` with given number of microseconds.",115,{"inputs":[{"name":"i64"}],"output":{"name":"timespec"}}],[11,"nanoseconds","","Makes a new `TimeSpec` with given number of nanoseconds.",115,{"inputs":[{"name":"i64"}],"output":{"name":"timespec"}}],[11,"num_seconds","","",115,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","",115,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","",115,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_nanoseconds","","",115,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"tv_sec","","",115,{"inputs":[{"name":"self"}],"output":{"name":"time_t"}}],[11,"tv_nsec","","",115,{"inputs":[{"name":"self"}],"output":{"name":"c_long"}}],[11,"neg","","",115,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"add","","",115,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"sub","","",115,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"mul","","",115,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"div","","",115,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"as_ref","","",116,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"cmp","","",116,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",116,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"seconds","","",116,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"milliseconds","","",116,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",116,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"nanoseconds","","Makes a new `TimeVal` with given number of nanoseconds.  Some precision will be lost",116,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"num_seconds","","",116,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","",116,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","",116,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_nanoseconds","","",116,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"tv_sec","","",116,{"inputs":[{"name":"self"}],"output":{"name":"time_t"}}],[11,"tv_usec","","",116,{"inputs":[{"name":"self"}],"output":{"name":"suseconds_t"}}],[11,"neg","","",116,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"add","","",116,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"sub","","",116,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"mul","","",116,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"div","","",116,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"uio","nix::sys","",null,null],[3,"IoVec","nix::sys::uio","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"pwritev","","Write to `fd` at `offset` from buffers in `iov`.",null,null],[5,"preadv","","Read from `fd` at `offset` filling buffers in `iov`.",null,null],[5,"pwrite","","",null,null],[5,"pread","","",null,null],[11,"as_slice","","",117,null],[11,"from_slice","","",117,null],[11,"from_mut_slice","","",117,null],[0,"utsname","nix::sys","",null,null],[3,"UtsName","nix::sys::utsname","",null,null],[5,"uname","","",null,{"inputs":[],"output":{"name":"utsname"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"sysname","","",118,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"nodename","","",118,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"release","","",118,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"version","","",118,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"machine","","",118,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"wait","nix::sys","",null,null],[3,"WaitPidFlag","nix::sys::wait","",null,null],[4,"WaitStatus","","Possible return values from `wait()` or `waitpid()`.",null,null],[13,"Exited","","The process exited normally (as with `exit()` or returning from `main`) with the given exit code. This case matches the C macro `WIFEXITED(status)`; the second field is `WEXITSTATUS(status)`.",119,null],[13,"Signaled","","The process was killed by the given signal. The third field indicates whether the signal generated a core dump. This case matches the C macro `WIFSIGNALED(status)`; the last two fields correspond to `WTERMSIG(status)` and `WCOREDUMP(status)`.",119,null],[13,"Stopped","","The process is alive, but was stopped by the given signal. This is only reported if `WaitPidFlag::WUNTRACED` was passed. This case matches the C macro `WIFSTOPPED(status)`; the second field is `WSTOPSIG(status)`.",119,null],[13,"Continued","","The process was previously stopped but has resumed execution after receiving a `SIGCONT` signal. This is only reported if `WaitPidFlag::WCONTINUED` was passed. This case matches the C macro `WIFCONTINUED(status)`.",119,null],[13,"StillAlive","","There are currently no state changes to report in any awaited child process. This is only returned if `WaitPidFlag::WNOHANG` was used (otherwise `wait()` or `waitpid()` would block until there was something to report).",119,null],[5,"waitpid","","",null,{"inputs":[{"name":"p"},{"generics":["waitpidflag"],"name":"option"}],"output":{"generics":["waitstatus"],"name":"result"}}],[5,"wait","","",null,{"inputs":[],"output":{"generics":["waitstatus"],"name":"result"}}],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"waitpidflag"}}],[11,"partial_cmp","","",120,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",120,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"le","","",120,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"gt","","",120,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ge","","",120,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"cmp","","",120,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"ordering"}}],[11,"hash","","",120,null],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"WNOHANG","","",120,null],[18,"WUNTRACED","","",120,null],[18,"WEXITED","","",120,null],[18,"WCONTINUED","","",120,null],[18,"WSTOPPED","","",120,null],[18,"WNOWAIT","","Don't reap, just poll status.",120,null],[11,"empty","","Returns an empty set of flags.",120,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"all","","Returns the set containing all flags.",120,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",120,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",120,{"inputs":[{"name":"c_int"}],"output":{"generics":["waitpidflag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",120,{"inputs":[{"name":"c_int"}],"output":{"name":"waitpidflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",120,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",120,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",120,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",120,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",120,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",120,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",120,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",120,{"inputs":[{"name":"self"},{"name":"waitpidflag"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",120,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitor_assign","","Adds the set of flags.",120,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",120,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitxor_assign","","Toggles the set of flags.",120,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",120,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",120,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",120,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",120,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",120,{"inputs":[{"name":"self"}],"output":{"name":"waitpidflag"}}],[11,"extend","","",120,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",120,{"inputs":[{"name":"t"}],"output":{"name":"waitpidflag"}}],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"waitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"self"},{"name":"waitstatus"}],"output":{"name":"bool"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"waitstatus"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pid","","Extracts the PID from the WaitStatus unless it equals StillAlive.",119,{"inputs":[{"name":"self"}],"output":{"generics":["pid"],"name":"option"}}],[11,"from_raw","","Convert a raw `wstatus` as returned by `waitpid`/`wait` into a `WaitStatus`",119,{"inputs":[{"name":"pid"},{"name":"i32"}],"output":{"generics":["waitstatus"],"name":"result"}}],[0,"unistd","nix","Safe wrappers around functions found in libc \"unistd.h\" header",null,null],[3,"Uid","nix::unistd","User identifier",null,null],[3,"Gid","","Group identifier",null,null],[3,"Pid","","Process identifier",null,null],[4,"ForkResult","","Represents the successful result of calling `fork`",null,null],[13,"Parent","","",121,null],[12,"child","nix::unistd::ForkResult","",121,null],[13,"Child","nix::unistd","",121,null],[4,"Whence","","Directive that tells [`lseek`] and [`lseek64`] what the offset is relative to.",null,null],[13,"SeekSet","","Specify an offset relative to the start of the file.",122,null],[13,"SeekCur","","Specify an offset relative to the current file location.",122,null],[13,"SeekEnd","","Specify an offset relative to the end of the file.",122,null],[13,"SeekData","","Specify an offset relative to the next location in the file greater than or equal to offset that contains some data. If offset points to some data, then the file offset is set to offset.",122,null],[13,"SeekHole","","Specify an offset relative to the next hole in the file greater than or equal to offset. If offset points into the middle of a hole, then the file offset should be set to offset. If there is no hole past offset, then the file offset should be adjusted to the end of the file (i.e., there is an implicit hole at the end of any file).",122,null],[4,"PathconfVar","","Variable names for `pathconf`",null,null],[13,"FILESIZEBITS","","Minimum number of bits needed to represent, as a signed integer value, the maximum size of a regular file allowed in the specified directory.",123,null],[13,"LINK_MAX","","Maximum number of links to a single file.",123,null],[13,"MAX_CANON","","Maximum number of bytes in a terminal canonical input line.",123,null],[13,"MAX_INPUT","","Minimum number of bytes for which space is available in a terminal input queue; therefore, the maximum number of bytes a conforming application may require to be typed as input before reading them.",123,null],[13,"NAME_MAX","","Maximum number of bytes in a filename (not including the terminating null of a filename string).",123,null],[13,"PATH_MAX","","Maximum number of bytes the implementation will store as a pathname in a user-supplied buffer of unspecified size, including the terminating null character. Minimum number the implementation will accept as the maximum number of bytes in a pathname.",123,null],[13,"PIPE_BUF","","Maximum number of bytes that is guaranteed to be atomic when writing to a pipe.",123,null],[13,"POSIX_ALLOC_SIZE_MIN","","Minimum number of bytes of storage actually allocated for any portion of a file.",123,null],[13,"POSIX_REC_INCR_XFER_SIZE","","Recommended increment for file transfer sizes between the `POSIX_REC_MIN_XFER_SIZE` and `POSIX_REC_MAX_XFER_SIZE` values.",123,null],[13,"POSIX_REC_MAX_XFER_SIZE","","Maximum recommended file transfer size.",123,null],[13,"POSIX_REC_MIN_XFER_SIZE","","Minimum recommended file transfer size.",123,null],[13,"POSIX_REC_XFER_ALIGN","","Recommended file transfer buffer alignment.",123,null],[13,"SYMLINK_MAX","","Maximum number of bytes in a symbolic link.",123,null],[13,"_POSIX_CHOWN_RESTRICTED","","The use of `chown` and `fchown` is restricted to a process with appropriate privileges, and to changing the group ID of a file only to the effective group ID of the process or to one of its supplementary group IDs.",123,null],[13,"_POSIX_NO_TRUNC","","Pathname components longer than {NAME_MAX} generate an error.",123,null],[13,"_POSIX_VDISABLE","","This symbol shall be defined to be the value of a character that shall disable terminal special character handling.",123,null],[13,"_POSIX_ASYNC_IO","","Asynchronous input or output operations may be performed for the associated file.",123,null],[13,"_POSIX_PRIO_IO","","Prioritized input or output operations may be performed for the associated file.",123,null],[13,"_POSIX_SYNC_IO","","Synchronized input or output operations may be performed for the associated file.",123,null],[4,"SysconfVar","","Variable names for `sysconf`",null,null],[13,"AIO_LISTIO_MAX","","Maximum number of I/O operations in a single list I/O call supported by the implementation.",124,null],[13,"AIO_MAX","","Maximum number of outstanding asynchronous I/O operations supported by the implementation.",124,null],[13,"AIO_PRIO_DELTA_MAX","","The maximum amount by which a process can decrease its asynchronous I/O priority level from its own scheduling priority.",124,null],[13,"ARG_MAX","","Maximum length of argument to the exec functions including environment data.",124,null],[13,"ATEXIT_MAX","","Maximum number of functions that may be registered with `atexit`.",124,null],[13,"BC_BASE_MAX","","Maximum obase values allowed by the bc utility.",124,null],[13,"BC_DIM_MAX","","Maximum number of elements permitted in an array by the bc utility.",124,null],[13,"BC_SCALE_MAX","","Maximum scale value allowed by the bc utility.",124,null],[13,"BC_STRING_MAX","","Maximum length of a string constant accepted by the bc utility.",124,null],[13,"CHILD_MAX","","Maximum number of simultaneous processes per real user ID.",124,null],[13,"COLL_WEIGHTS_MAX","","Maximum number of weights that can be assigned to an entry of the LC_COLLATE order keyword in the locale definition file",124,null],[13,"DELAYTIMER_MAX","","Maximum number of timer expiration overruns.",124,null],[13,"EXPR_NEST_MAX","","Maximum number of expressions that can be nested within parentheses by the expr utility.",124,null],[13,"HOST_NAME_MAX","","Maximum length of a host name (not including the terminating null) as returned from the `gethostname` function",124,null],[13,"IOV_MAX","","Maximum number of iovec structures that one process has available for use with `readv` or `writev`.",124,null],[13,"LINE_MAX","","Unless otherwise noted, the maximum length, in bytes, of a utility's input line (either standard input or another file), when the utility is described as processing text files. The length includes room for the trailing .",124,null],[13,"LOGIN_NAME_MAX","","Maximum length of a login name.",124,null],[13,"NGROUPS_MAX","","Maximum number of simultaneous supplementary group IDs per process.",124,null],[13,"GETGR_R_SIZE_MAX","","Initial size of `getgrgid_r` and `getgrnam_r` data buffers",124,null],[13,"GETPW_R_SIZE_MAX","","Initial size of `getpwuid_r` and `getpwnam_r` data buffers",124,null],[13,"MQ_OPEN_MAX","","The maximum number of open message queue descriptors a process may hold.",124,null],[13,"MQ_PRIO_MAX","","The maximum number of message priorities supported by the implementation.",124,null],[13,"OPEN_MAX","","A value one greater than the maximum value that the system may assign to a newly-created file descriptor.",124,null],[13,"_POSIX_ADVISORY_INFO","","The implementation supports the Advisory Information option.",124,null],[13,"_POSIX_BARRIERS","","The implementation supports barriers.",124,null],[13,"_POSIX_ASYNCHRONOUS_IO","","The implementation supports asynchronous input and output.",124,null],[13,"_POSIX_CLOCK_SELECTION","","The implementation supports clock selection.",124,null],[13,"_POSIX_CPUTIME","","The implementation supports the Process CPU-Time Clocks option.",124,null],[13,"_POSIX_FSYNC","","The implementation supports the File Synchronization option.",124,null],[13,"_POSIX_IPV6","","The implementation supports the IPv6 option.",124,null],[13,"_POSIX_JOB_CONTROL","","The implementation supports job control.",124,null],[13,"_POSIX_MAPPED_FILES","","The implementation supports memory mapped Files.",124,null],[13,"_POSIX_MEMLOCK","","The implementation supports the Process Memory Locking option.",124,null],[13,"_POSIX_MEMLOCK_RANGE","","The implementation supports the Range Memory Locking option.",124,null],[13,"_POSIX_MEMORY_PROTECTION","","The implementation supports memory protection.",124,null],[13,"_POSIX_MESSAGE_PASSING","","The implementation supports the Message Passing option.",124,null],[13,"_POSIX_MONOTONIC_CLOCK","","The implementation supports the Monotonic Clock option.",124,null],[13,"_POSIX_PRIORITIZED_IO","","The implementation supports the Prioritized Input and Output option.",124,null],[13,"_POSIX_PRIORITY_SCHEDULING","","The implementation supports the Process Scheduling option.",124,null],[13,"_POSIX_RAW_SOCKETS","","The implementation supports the Raw Sockets option.",124,null],[13,"_POSIX_READER_WRITER_LOCKS","","The implementation supports read-write locks.",124,null],[13,"_POSIX_REALTIME_SIGNALS","","The implementation supports realtime signals.",124,null],[13,"_POSIX_REGEXP","","The implementation supports the Regular Expression Handling option.",124,null],[13,"_POSIX_SAVED_IDS","","Each process has a saved set-user-ID and a saved set-group-ID.",124,null],[13,"_POSIX_SEMAPHORES","","The implementation supports semaphores.",124,null],[13,"_POSIX_SHARED_MEMORY_OBJECTS","","The implementation supports the Shared Memory Objects option.",124,null],[13,"_POSIX_SHELL","","The implementation supports the POSIX shell.",124,null],[13,"_POSIX_SPAWN","","The implementation supports the Spawn option.",124,null],[13,"_POSIX_SPIN_LOCKS","","The implementation supports spin locks.",124,null],[13,"_POSIX_SPORADIC_SERVER","","The implementation supports the Process Sporadic Server option.",124,null],[13,"_POSIX_SYNCHRONIZED_IO","","The implementation supports the Synchronized Input and Output option.",124,null],[13,"_POSIX_THREAD_ATTR_STACKADDR","","The implementation supports the Thread Stack Address Attribute option.",124,null],[13,"_POSIX_THREAD_ATTR_STACKSIZE","","The implementation supports the Thread Stack Size Attribute option.",124,null],[13,"_POSIX_THREAD_PRIO_INHERIT","","The implementation supports the Non-Robust Mutex Priority Inheritance option.",124,null],[13,"_POSIX_THREAD_PRIO_PROTECT","","The implementation supports the Non-Robust Mutex Priority Protection option.",124,null],[13,"_POSIX_THREAD_PRIORITY_SCHEDULING","","The implementation supports the Thread Execution Scheduling option.",124,null],[13,"_POSIX_THREAD_PROCESS_SHARED","","The implementation supports the Thread Process-Shared Synchronization option.",124,null],[13,"_POSIX_THREAD_SAFE_FUNCTIONS","","The implementation supports thread-safe functions.",124,null],[13,"_POSIX_THREAD_SPORADIC_SERVER","","The implementation supports the Thread Sporadic Server option.",124,null],[13,"_POSIX_THREADS","","The implementation supports threads.",124,null],[13,"_POSIX_TIMEOUTS","","The implementation supports timeouts.",124,null],[13,"_POSIX_TIMERS","","The implementation supports timers.",124,null],[13,"_POSIX_TRACE","","The implementation supports the Trace option.",124,null],[13,"_POSIX_TRACE_EVENT_FILTER","","The implementation supports the Trace Event Filter option.",124,null],[13,"_POSIX_TRACE_INHERIT","","The implementation supports the Trace Inherit option.",124,null],[13,"_POSIX_TRACE_LOG","","The implementation supports the Trace Log option.",124,null],[13,"_POSIX_TYPED_MEMORY_OBJECTS","","The implementation supports the Typed Memory Objects option.",124,null],[13,"_POSIX_VERSION","","Integer value indicating version of this standard (C-language binding) to which the implementation conforms. For implementations conforming to POSIX.1-2008, the value shall be 200809L.",124,null],[13,"_POSIX_V6_ILP32_OFF32","","The implementation provides a C-language compilation environment with 32-bit `int`, `long`, `pointer`, and `off_t` types.",124,null],[13,"_POSIX_V6_ILP32_OFFBIG","","The implementation provides a C-language compilation environment with 32-bit `int`, `long`, and pointer types and an `off_t` type using at least 64 bits.",124,null],[13,"_POSIX_V6_LP64_OFF64","","The implementation provides a C-language compilation environment with 32-bit `int` and 64-bit `long`, `pointer`, and `off_t` types.",124,null],[13,"_POSIX_V6_LPBIG_OFFBIG","","The implementation provides a C-language compilation environment with an `int` type using at least 32 bits and `long`, pointer, and `off_t` types using at least 64 bits.",124,null],[13,"_POSIX2_C_BIND","","The implementation supports the C-Language Binding option.",124,null],[13,"_POSIX2_C_DEV","","The implementation supports the C-Language Development Utilities option.",124,null],[13,"_POSIX2_CHAR_TERM","","The implementation supports the Terminal Characteristics option.",124,null],[13,"_POSIX2_FORT_DEV","","The implementation supports the FORTRAN Development Utilities option.",124,null],[13,"_POSIX2_FORT_RUN","","The implementation supports the FORTRAN Runtime Utilities option.",124,null],[13,"_POSIX2_LOCALEDEF","","The implementation supports the creation of locales by the localedef utility.",124,null],[13,"_POSIX2_PBS","","The implementation supports the Batch Environment Services and Utilities option.",124,null],[13,"_POSIX2_PBS_ACCOUNTING","","The implementation supports the Batch Accounting option.",124,null],[13,"_POSIX2_PBS_CHECKPOINT","","The implementation supports the Batch Checkpoint/Restart option.",124,null],[13,"_POSIX2_PBS_LOCATE","","The implementation supports the Locate Batch Job Request option.",124,null],[13,"_POSIX2_PBS_MESSAGE","","The implementation supports the Batch Job Message Request option.",124,null],[13,"_POSIX2_PBS_TRACK","","The implementation supports the Track Batch Job Request option.",124,null],[13,"_POSIX2_SW_DEV","","The implementation supports the Software Development Utilities option.",124,null],[13,"_POSIX2_UPE","","The implementation supports the User Portability Utilities option.",124,null],[13,"_POSIX2_VERSION","","Integer value indicating version of the Shell and Utilities volume of POSIX.1 to which the implementation conforms.",124,null],[13,"PAGE_SIZE","","The size of a system page in bytes.",124,null],[13,"PTHREAD_DESTRUCTOR_ITERATIONS","","",124,null],[13,"PTHREAD_KEYS_MAX","","",124,null],[13,"PTHREAD_STACK_MIN","","",124,null],[13,"PTHREAD_THREADS_MAX","","",124,null],[13,"RE_DUP_MAX","","",124,null],[13,"RTSIG_MAX","","",124,null],[13,"SEM_NSEMS_MAX","","",124,null],[13,"SEM_VALUE_MAX","","",124,null],[13,"SIGQUEUE_MAX","","",124,null],[13,"STREAM_MAX","","",124,null],[13,"SYMLOOP_MAX","","",124,null],[13,"TIMER_MAX","","",124,null],[13,"TTY_NAME_MAX","","",124,null],[13,"TZNAME_MAX","","",124,null],[13,"_XOPEN_CRYPT","","The implementation supports the X/Open Encryption Option Group.",124,null],[13,"_XOPEN_ENH_I18N","","The implementation supports the Issue 4, Version 2 Enhanced Internationalization Option Group.",124,null],[13,"_XOPEN_LEGACY","","",124,null],[13,"_XOPEN_REALTIME","","The implementation supports the X/Open Realtime Option Group.",124,null],[13,"_XOPEN_REALTIME_THREADS","","The implementation supports the X/Open Realtime Threads Option Group.",124,null],[13,"_XOPEN_SHM","","The implementation supports the Issue 4, Version 2 Shared Memory Option Group.",124,null],[13,"_XOPEN_STREAMS","","The implementation supports the XSI STREAMS Option Group.",124,null],[13,"_XOPEN_UNIX","","The implementation supports the XSI option",124,null],[13,"_XOPEN_VERSION","","Integer value indicating version of the X/Open Portability Guide to which the implementation conforms.",124,null],[5,"setresuid","","Sets the real, effective, and saved uid. (see setresuid(2))",null,{"inputs":[{"name":"uid"},{"name":"uid"},{"name":"uid"}],"output":{"name":"result"}}],[5,"setresgid","","Sets the real, effective, and saved gid. (see setresuid(2))",null,{"inputs":[{"name":"gid"},{"name":"gid"},{"name":"gid"}],"output":{"name":"result"}}],[5,"fork","","Create a new child process duplicating the parent process (see fork(2)).",null,{"inputs":[],"output":{"generics":["forkresult"],"name":"result"}}],[5,"getpid","","Get the pid of this process (see getpid(2)).",null,{"inputs":[],"output":{"name":"pid"}}],[5,"getppid","","Get the pid of this processes' parent (see getpid(2)).",null,{"inputs":[],"output":{"name":"pid"}}],[5,"setpgid","","Set a process group ID (see setpgid(2)).",null,{"inputs":[{"name":"pid"},{"name":"pid"}],"output":{"name":"result"}}],[5,"getpgid","","",null,{"inputs":[{"generics":["pid"],"name":"option"}],"output":{"generics":["pid"],"name":"result"}}],[5,"setsid","","Create new session and set process group id (see setsid(2)).",null,{"inputs":[],"output":{"generics":["pid"],"name":"result"}}],[5,"getsid","","Get the process group ID of a session leader getsid(2).",null,{"inputs":[{"generics":["pid"],"name":"option"}],"output":{"generics":["pid"],"name":"result"}}],[5,"tcgetpgrp","","Get the terminal foreground process group (see tcgetpgrp(3)).",null,{"inputs":[{"name":"c_int"}],"output":{"generics":["pid"],"name":"result"}}],[5,"tcsetpgrp","","Set the terminal foreground process group (see tcgetpgrp(3)).",null,{"inputs":[{"name":"c_int"},{"name":"pid"}],"output":{"name":"result"}}],[5,"getpgrp","","Get the group id of the calling process (see getpgrp(3)).",null,{"inputs":[],"output":{"name":"pid"}}],[5,"dup","","Create a copy of the specified file descriptor (see dup(2)).",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"dup2","","Create a copy of the specified file descriptor using the specified fd (see dup(2)).",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"dup3","","Create a new copy of the specified file descriptor using the specified fd and flags (see dup(2)).",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"oflag"}],"output":{"generics":["rawfd"],"name":"result"}}],[5,"chdir","","Change the current working directory of the calling process (see chdir(2)).",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fchdir","","Change the current working directory of the process to the one given as an open file descriptor (see fchdir(2)).",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"mkdir","","Creates new directory `path` with access rights `mode`.  (see mkdir(2))",null,{"inputs":[{"name":"p"},{"name":"mode"}],"output":{"name":"result"}}],[5,"mkfifo","","Creates new fifo special file (named pipe) with path `path` and access rights `mode`.",null,{"inputs":[{"name":"p"},{"name":"mode"}],"output":{"name":"result"}}],[5,"getcwd","","Returns the current directory as a `PathBuf`",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"result"}}],[5,"chown","","Change the ownership of the file at `path` to be owned by the specified `owner` (user) and `group` (see chown(2)).",null,{"inputs":[{"name":"p"},{"generics":["uid"],"name":"option"},{"generics":["gid"],"name":"option"}],"output":{"name":"result"}}],[5,"execv","","Replace the current process image with a new one (see exec(3)).",null,null],[5,"execve","","Replace the current process image with a new one (see execve(2)).",null,null],[5,"execvp","","Replace the current process image with a new one and replicate shell `PATH` searching behavior (see exec(3)).",null,null],[5,"fexecve","","Replace the current process image with a new one (see fexecve(2)).",null,null],[5,"daemon","","Daemonize this process by detaching from the controlling terminal (see daemon(3)).",null,{"inputs":[{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[5,"sethostname","","Set the system host name (see sethostname(2)).",null,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[5,"gethostname","","Get the host name and store it in the provided buffer, returning a pointer the `CStr` in that buffer on success (see gethostname(2)).",null,null],[5,"close","","Close a raw file descriptor",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"read","","Read from a raw file descriptor.",null,null],[5,"write","","Write to a raw file descriptor.",null,null],[5,"lseek","","Move the read/write file offset.",null,{"inputs":[{"name":"rawfd"},{"name":"off_t"},{"name":"whence"}],"output":{"generics":["off_t"],"name":"result"}}],[5,"pipe","","Create an interprocess channel.",null,{"inputs":[],"output":{"name":"result"}}],[5,"pipe2","","Like `pipe`, but allows setting certain file descriptor flags.",null,{"inputs":[{"name":"oflag"}],"output":{"name":"result"}}],[5,"ftruncate","","Truncate a file to a specified length",null,{"inputs":[{"name":"rawfd"},{"name":"off_t"}],"output":{"name":"result"}}],[5,"isatty","","",null,{"inputs":[{"name":"rawfd"}],"output":{"generics":["bool"],"name":"result"}}],[5,"unlink","","Remove a directory entry",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"chroot","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fsync","","Synchronize changes to a file",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"getuid","","Get a real user ID",null,{"inputs":[],"output":{"name":"uid"}}],[5,"geteuid","","Get the effective user ID",null,{"inputs":[],"output":{"name":"uid"}}],[5,"getgid","","Get the real group ID",null,{"inputs":[],"output":{"name":"gid"}}],[5,"getegid","","Get the effective group ID",null,{"inputs":[],"output":{"name":"gid"}}],[5,"setuid","","Set the user ID",null,{"inputs":[{"name":"uid"}],"output":{"name":"result"}}],[5,"setgid","","Set the user ID",null,{"inputs":[{"name":"gid"}],"output":{"name":"result"}}],[5,"getgroups","","Get the list of supplementary group IDs of the calling process.",null,{"inputs":[],"output":{"generics":["vec"],"name":"result"}}],[5,"setgroups","","Set the list of supplementary group IDs for the calling process.",null,null],[5,"getgrouplist","","Calculate the supplementary group access list.",null,{"inputs":[{"name":"cstr"},{"name":"gid"}],"output":{"generics":["vec"],"name":"result"}}],[5,"initgroups","","Initialize the supplementary group access list.",null,{"inputs":[{"name":"cstr"},{"name":"gid"}],"output":{"name":"result"}}],[5,"pause","","Suspend the thread until a signal is received.",null,{"inputs":[],"output":null}],[5,"sleep","","Suspend execution for an interval of time",null,{"inputs":[{"name":"c_uint"}],"output":{"name":"c_uint"}}],[5,"mkstemp","","Creates a regular file which persists even after process termination",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fpathconf","","Like `pathconf`, but works with file descriptors instead of paths (see fpathconf(2))",null,{"inputs":[{"name":"rawfd"},{"name":"pathconfvar"}],"output":{"generics":["option"],"name":"result"}}],[5,"pathconf","","Get path-dependent configurable system variables (see pathconf(2))",null,{"inputs":[{"name":"p"},{"name":"pathconfvar"}],"output":{"generics":["option"],"name":"result"}}],[5,"sysconf","","Get configurable system variables (see sysconf(3))",null,{"inputs":[{"name":"sysconfvar"}],"output":{"generics":["option"],"name":"result"}}],[0,"alarm","","Alarm signal scheduling.",null,null],[5,"set","nix::unistd::alarm","Schedule an alarm signal.",null,{"inputs":[{"name":"c_uint"}],"output":{"generics":["c_uint"],"name":"option"}}],[5,"cancel","","Cancel an previously set alarm signal.",null,{"inputs":[],"output":{"generics":["c_uint"],"name":"option"}}],[17,"ROOT","nix::unistd","Constant for UID = 0",null,null],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"uid"}}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"uid"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"self"},{"name":"uid"}],"output":{"name":"bool"}}],[11,"hash","","",125,null],[11,"from_raw","","Creates `Uid` from raw `uid_t`.",125,{"inputs":[{"name":"uid_t"}],"output":{"name":"self"}}],[11,"current","","Returns Uid of calling process. This is practically a more Rusty alias for `getuid`.",125,{"inputs":[],"output":{"name":"self"}}],[11,"effective","","Returns effective Uid of calling process. This is practically a more Rusty alias for `geteuid`.",125,{"inputs":[],"output":{"name":"self"}}],[11,"is_root","","Returns true if the `Uid` represents privileged user - root. (If it equals zero.)",125,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"gid"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"gid"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"self"},{"name":"gid"}],"output":{"name":"bool"}}],[11,"hash","","",126,null],[11,"from_raw","","Creates `Gid` from raw `gid_t`.",126,{"inputs":[{"name":"gid_t"}],"output":{"name":"self"}}],[11,"current","","Returns Gid of calling process. This is practically a more Rusty alias for `getgid`.",126,{"inputs":[],"output":{"name":"self"}}],[11,"effective","","Returns effective Gid of calling process. This is practically a more Rusty alias for `getgid`.",126,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"pid"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"pid"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"self"},{"name":"pid"}],"output":{"name":"bool"}}],[11,"hash","","",127,null],[11,"from_raw","","Creates `Pid` from raw `pid_t`.",127,{"inputs":[{"name":"pid_t"}],"output":{"name":"self"}}],[11,"this","","Returns PID of calling process",127,{"inputs":[],"output":{"name":"self"}}],[11,"parent","","Returns PID of parent of calling process",127,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",128,{"inputs":[{"name":"pid"}],"output":{"name":"self"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"forkresult"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_child","","Return `true` if this is the child process of the `fork()`",121,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_parent","","Returns `true` if this is the parent process of the `fork()`",121,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"whence"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"pathconfvar"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",123,null],[11,"eq","","",123,{"inputs":[{"name":"self"},{"name":"pathconfvar"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"sysconfvar"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",124,null],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"sysconfvar"}],"output":{"name":"bool"}}],[6,"Result","nix","Nix Result Type",null,null],[8,"NixPath","","",null,null],[10,"len","","",129,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"with_nix_path","","",129,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_errno","","Create a nix Error from a given errno",0,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"last","","Get the current errno and convert it to a nix Error",0,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_argument","","Create a new invalid argument error (`EINVAL`)",0,{"inputs":[],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"request_code_none","","Generate an ioctl request code for a command that passes no data.",null,null],[14,"request_code_write_int","","Generate an ioctl request code for a command that passes an integer",null,null],[14,"request_code_read","","Generate an ioctl request code for a command that reads.",null,null],[14,"request_code_write","","Generate an ioctl request code for a command that writes.",null,null],[14,"request_code_readwrite","","Generate an ioctl request code for a command that reads and writes.",null,null],[14,"ioctl_none","","Generates a wrapper function for an ioctl that passes no data to the kernel.",null,null],[14,"ioctl_none_bad","","Generates a wrapper function for a \"bad\" ioctl that passes no data to the kernel.",null,null],[14,"ioctl_read","","Generates a wrapper function for an ioctl that reads data from the kernel.",null,null],[14,"ioctl_read_bad","","Generates a wrapper function for a \"bad\" ioctl that reads data from the kernel.",null,null],[14,"ioctl_write_ptr","","Generates a wrapper function for an ioctl that writes data through a pointer to the kernel.",null,null],[14,"ioctl_write_ptr_bad","","Generates a wrapper function for a \"bad\" ioctl that writes data through a pointer to the kernel.",null,null],[14,"ioctl_write_int","","Generates a wrapper function for a ioctl that writes an integer to the kernel.",null,null],[14,"ioctl_write_int_bad","","Generates a wrapper function for a \"bad\" ioctl that writes an integer to the kernel.",null,null],[14,"ioctl_readwrite","","Generates a wrapper function for an ioctl that reads and writes data to the kernel.",null,null],[14,"ioctl_readwrite_bad","","Generates a wrapper function for a \"bad\" ioctl that reads and writes data to the kernel.",null,null],[14,"ioctl_read_buf","","Generates a wrapper function for an ioctl that reads an array of elements from the kernel.",null,null],[14,"ioctl_write_buf","","Generates a wrapper function for an ioctl that writes an array of elements to the kernel.",null,null],[14,"ioctl_readwrite_buf","","Generates a wrapper function for an ioctl that reads and writes an array of elements to the kernel.",null,null],[11,"clone","nix::sys::stat","",98,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","nix::sys::socket","",47,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","nix::pty","",16,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}]],"paths":[[4,"Error"],[4,"Errno"],[8,"ErrnoSentinel"],[4,"FcntlArg"],[4,"FlockArg"],[3,"AtFlags"],[3,"OFlag"],[3,"FdFlag"],[3,"InterfaceAddress"],[3,"InterfaceAddressIterator"],[3,"MQ_OFlag"],[3,"FdFlag"],[3,"MqAttr"],[3,"InterfaceFlags"],[3,"PollFd"],[3,"EventFlags"],[3,"Winsize"],[3,"OpenptyResult"],[3,"PtyMaster"],[3,"LioCb"],[4,"AioFsyncMode"],[4,"LioOpcode"],[4,"LioMode"],[4,"AioCancelStat"],[4,"Buffer"],[3,"AioCb"],[4,"EventFilter"],[3,"KEvent"],[3,"EventFlag"],[3,"FilterFlag"],[4,"MmapAdvise"],[3,"ProtFlags"],[3,"MapFlags"],[3,"MsFlags"],[3,"MlockAllFlags"],[3,"FdSet"],[3,"SfFlags"],[4,"Signal"],[4,"SigmaskHow"],[4,"SigHandler"],[4,"SigevNotify"],[3,"SigEvent"],[3,"SignalIterator"],[3,"SaFlags"],[3,"SigSet"],[3,"SigAction"],[3,"cmsghdr"],[3,"msghdr"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_storage"],[3,"sockaddr_un"],[3,"UnixAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"LinkAddr"],[3,"RecvMsg"],[4,"AddressFamily"],[4,"SockAddr"],[4,"InetAddr"],[4,"IpAddr"],[4,"SockType"],[4,"SockProtocol"],[4,"ControlMessage"],[4,"SockLevel"],[4,"Shutdown"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"TcpKeepIdle"],[3,"RcvBuf"],[3,"SndBuf"],[3,"SockType"],[3,"AcceptConn"],[3,"ReceiveTimestamp"],[3,"BindAny"],[8,"GetSockOpt"],[8,"SetSockOpt"],[3,"SockFlag"],[3,"MsgFlags"],[3,"IpMembershipRequest"],[3,"Ipv6MembershipRequest"],[3,"CmsgSpace"],[3,"CmsgIterator"],[3,"FileStat"],[4,"FchmodatFlags"],[3,"SFlag"],[3,"Mode"],[3,"FsFlags"],[3,"Statvfs"],[3,"Termios"],[4,"BaudRate"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[4,"SpecialCharacterIndices"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[8,"TimeValLike"],[3,"TimeSpec"],[3,"TimeVal"],[3,"IoVec"],[3,"UtsName"],[4,"WaitStatus"],[3,"WaitPidFlag"],[4,"ForkResult"],[4,"Whence"],[4,"PathconfVar"],[4,"SysconfVar"],[3,"Uid"],[3,"Gid"],[3,"Pid"],[6,"SessionId"],[8,"NixPath"]]};
searchIndex["rustc_demangle"] = {"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",null,null],[3,"TryDemangleError","","Error returned from the `try_demangle` function below when demangling fails.",null,null],[5,"demangle","","De-mangles a Rust symbol into a more readable version",null,{"inputs":[{"name":"str"}],"output":{"name":"demangle"}}],[5,"try_demangle","","The same as `demangle`, except return an `Err` if the string does not appear to be a Rust symbol, rather than \"demangling\" the given string as a no-op.",null,{"inputs":[{"name":"str"}],"output":{"generics":["demangle","trydemangleerror"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"trydemangleerror"}}],[11,"as_str","","Returns the underlying string that's being demangled.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"TryDemangleError"],[3,"Demangle"]]};
searchIndex["sysctl"] = {"doc":"A simplified interface to the `sysctl` system call.","items":[[3,"CtlFlags","sysctl","",null,null],[3,"Temperature","","A custom type for temperature sysctls.",null,null],[3,"Ctl","","This struct represents a system control.",null,null],[3,"CtlIter","","An iterator over Sysctl entries.",null,null],[4,"CtlType","","An Enum that represents a sysctl's type information.",null,null],[13,"Node","","",0,null],[13,"Int","","",0,null],[13,"String","","",0,null],[13,"S64","","",0,null],[13,"Struct","","",0,null],[13,"Uint","","",0,null],[13,"Long","","",0,null],[13,"Ulong","","",0,null],[13,"U64","","",0,null],[13,"U8","","",0,null],[13,"U16","","",0,null],[13,"S8","","",0,null],[13,"S16","","",0,null],[13,"S32","","",0,null],[13,"U32","","",0,null],[13,"None","","",0,null],[13,"Temperature","","",0,null],[4,"CtlValue","","An Enum that holds all values returned by sysctl calls. Extract inner value with `if let` or `match`.",null,null],[13,"None","","",1,null],[13,"Node","","",1,null],[13,"Int","","",1,null],[13,"String","","",1,null],[13,"S64","","",1,null],[13,"Struct","","",1,null],[13,"Uint","","",1,null],[13,"Long","","",1,null],[13,"Ulong","","",1,null],[13,"U64","","",1,null],[13,"U8","","",1,null],[13,"U16","","",1,null],[13,"S8","","",1,null],[13,"S16","","",1,null],[13,"S32","","",1,null],[13,"U32","","",1,null],[13,"Temperature","","",1,null],[4,"SysctlError","","",null,null],[13,"UnknownType","","",2,null],[13,"ExtractionError","","",2,null],[13,"IoError","","",2,null],[13,"Utf8Error","","",2,null],[13,"NoReadAccess","","",2,null],[13,"NoWriteAccess","","",2,null],[13,"ShortRead","","",2,null],[12,"read","sysctl::SysctlError","",2,null],[12,"reported","","",2,null],[5,"value","sysctl","Takes the name of the OID as argument and returns a result containing the sysctl value if success, or a SysctlError on failure",null,{"inputs":[{"name":"str"}],"output":{"generics":["ctlvalue","sysctlerror"],"name":"result"}}],[5,"value_oid","","Takes an OID as argument and returns a result containing the sysctl value if success, or a SysctlError on failure",null,{"inputs":[{"name":"vec"}],"output":{"generics":["ctlvalue","sysctlerror"],"name":"result"}}],[5,"value_as","","A generic function that takes a string as argument and returns a result containing the sysctl value if success, or a SysctlError on failure.",null,{"inputs":[{"name":"str"}],"output":{"generics":["box","sysctlerror"],"name":"result"}}],[5,"value_oid_as","","A generic function that takes an OID as argument and returns a result containing the sysctl value if success, or a SysctlError on failure",null,{"inputs":[{"name":"vec"}],"output":{"generics":["box","sysctlerror"],"name":"result"}}],[5,"set_value","","Sets the value of a sysctl. Fetches and returns the new value if successful, or a SysctlError on failure",null,{"inputs":[{"name":"str"},{"name":"ctlvalue"}],"output":{"generics":["ctlvalue","sysctlerror"],"name":"result"}}],[5,"set_oid_value","","",null,{"inputs":[{"name":"vec"},{"name":"ctlvalue"}],"output":{"generics":["ctlvalue","sysctlerror"],"name":"result"}}],[5,"description","","Returns a result containing the sysctl description if success, or a SysctlError on failure.",null,{"inputs":[{"name":"str"}],"output":{"generics":["string","sysctlerror"],"name":"result"}}],[5,"next_oid","","Get the next OID.",null,{"inputs":[{"name":"vec"}],"output":{"generics":["option","sysctlerror"],"name":"result"}}],[17,"CTL_MAXNAME","","",null,null],[17,"CTLTYPE","","",null,null],[17,"CTLTYPE_NODE","","",null,null],[17,"CTLTYPE_INT","","",null,null],[17,"CTLTYPE_STRING","","",null,null],[17,"CTLTYPE_S64","","",null,null],[17,"CTLTYPE_OPAQUE","","",null,null],[17,"CTLTYPE_STRUCT","","",null,null],[17,"CTLTYPE_UINT","","",null,null],[17,"CTLTYPE_LONG","","",null,null],[17,"CTLTYPE_ULONG","","",null,null],[17,"CTLTYPE_U64","","",null,null],[17,"CTLTYPE_U8","","",null,null],[17,"CTLTYPE_U16","","",null,null],[17,"CTLTYPE_S8","","",null,null],[17,"CTLTYPE_S16","","",null,null],[17,"CTLTYPE_S32","","",null,null],[17,"CTLTYPE_U32","","",null,null],[17,"CTLFLAG_RD","","",null,null],[17,"CTLFLAG_WR","","",null,null],[17,"CTLFLAG_RW","","",null,null],[17,"CTLFLAG_DORMANT","","",null,null],[17,"CTLFLAG_ANYBODY","","",null,null],[17,"CTLFLAG_SECURE","","",null,null],[17,"CTLFLAG_PRISON","","",null,null],[17,"CTLFLAG_DYN","","",null,null],[17,"CTLFLAG_SKIP","","",null,null],[17,"CTLFLAG_TUN","","",null,null],[17,"CTLFLAG_RDTUN","","",null,null],[17,"CTLFLAG_RWTUN","","",null,null],[17,"CTLFLAG_MPSAFE","","",null,null],[17,"CTLFLAG_VNET","","",null,null],[17,"CTLFLAG_DYING","","",null,null],[17,"CTLFLAG_CAPRD","","",null,null],[17,"CTLFLAG_CAPWR","","",null,null],[17,"CTLFLAG_STATS","","",null,null],[17,"CTLFLAG_NOFETCH","","",null,null],[17,"CTLFLAG_CAPRW","","",null,null],[17,"CTLFLAG_SECURE1","","",null,null],[17,"CTLFLAG_SECURE2","","",null,null],[17,"CTLFLAG_SECURE3","","",null,null],[17,"CTLMASK_SECURE","","",null,null],[17,"CTLSHIFT_SECURE","","",null,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"ctlflags"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"ctlflags"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ctlflags"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"ctlflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"ctlflags"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"ctlflags"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"ctlflags"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"ctlflags"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"ctlflags"}],"output":{"name":"ordering"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"RD","","Allow reads of variable",3,null],[18,"WR","","Allow writes to the variable",3,null],[18,"RW","","",3,null],[18,"DORMANT","","This sysctl is not active yet",3,null],[18,"ANYBODY","","All users can set this var",3,null],[18,"SECURE","","Permit set only if securelevel<=0",3,null],[18,"PRISON","","Prisoned roots can fiddle",3,null],[18,"DYN","","Dynamic oid - can be freed",3,null],[18,"SKIP","","Skip this sysctl when listing",3,null],[18,"SECURE_MASK","","Secure level",3,null],[18,"TUN","","Default value is loaded from getenv()",3,null],[18,"RDTUN","","Readable tunable",3,null],[18,"RWTUN","","Readable and writeable tunable",3,null],[18,"MPSAFE","","Handler is MP safe",3,null],[18,"VNET","","Prisons with vnet can fiddle",3,null],[18,"DYING","","Oid is being removed",3,null],[18,"CAPRD","","Can be read in capability mode",3,null],[18,"CAPWR","","Can be written in capability mode",3,null],[18,"STATS","","Statistics; not a tuneable",3,null],[18,"NOFETCH","","Don't fetch tunable from getenv()",3,null],[18,"CAPRW","","Can be read and written in capability mode",3,null],[11,"empty","","Returns an empty set of flags.",3,{"inputs":[],"output":{"name":"ctlflags"}}],[11,"all","","Returns the set containing all flags.",3,{"inputs":[],"output":{"name":"ctlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",3,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",3,{"inputs":[{"name":"c_uint"}],"output":{"generics":["ctlflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",3,{"inputs":[{"name":"c_uint"}],"output":{"name":"ctlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",3,{"inputs":[{"name":"self"},{"name":"ctlflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",3,{"inputs":[{"name":"self"},{"name":"ctlflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",3,{"inputs":[{"name":"self"},{"name":"ctlflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",3,{"inputs":[{"name":"self"},{"name":"ctlflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",3,{"inputs":[{"name":"self"},{"name":"ctlflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",3,{"inputs":[{"name":"self"},{"name":"ctlflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",3,{"inputs":[{"name":"self"},{"name":"ctlflags"}],"output":{"name":"ctlflags"}}],[11,"bitor_assign","","Adds the set of flags.",3,{"inputs":[{"name":"self"},{"name":"ctlflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",3,{"inputs":[{"name":"self"},{"name":"ctlflags"}],"output":{"name":"ctlflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",3,{"inputs":[{"name":"self"},{"name":"ctlflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",3,{"inputs":[{"name":"self"},{"name":"ctlflags"}],"output":{"name":"ctlflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",3,{"inputs":[{"name":"self"},{"name":"ctlflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",3,{"inputs":[{"name":"self"},{"name":"ctlflags"}],"output":{"name":"ctlflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",3,{"inputs":[{"name":"self"},{"name":"ctlflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",3,{"inputs":[{"name":"self"}],"output":{"name":"ctlflags"}}],[11,"extend","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",3,{"inputs":[{"name":"t"}],"output":{"name":"ctlflags"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ctltype"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"ctltype"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"ctlvalue"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"ctlvalue"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"ctlvalue"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"ctlvalue"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"ctlvalue"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"ctlvalue"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"ctlvalue"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"ctlvalue"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"temperature"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"temperature"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"temperature"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"temperature"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"temperature"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"temperature"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"temperature"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"temperature"}],"output":{"name":"bool"}}],[11,"kelvin","","",4,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"celsius","","",4,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"fahrenheit","","",4,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"ctl"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"ctl"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"ctl"}],"output":{"name":"bool"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Construct a Ctl from the name.",5,{"inputs":[{"name":"str"}],"output":{"generics":["sysctlerror"],"name":"result"}}],[11,"name","","Returns a result containing the sysctl name on success, or a SysctlError on failure.",5,{"inputs":[{"name":"self"}],"output":{"generics":["string","sysctlerror"],"name":"result"}}],[11,"value_type","","Returns a result containing the sysctl value type on success, or a Sysctl Error on failure.",5,{"inputs":[{"name":"self"}],"output":{"generics":["ctltype","sysctlerror"],"name":"result"}}],[11,"description","","Returns a result containing the sysctl description if success, or an Error on failure.",5,{"inputs":[{"name":"self"}],"output":{"generics":["string","sysctlerror"],"name":"result"}}],[11,"value","","Returns a result containing the sysctl value on success, or a SysctlError on failure.",5,{"inputs":[{"name":"self"}],"output":{"generics":["ctlvalue","sysctlerror"],"name":"result"}}],[11,"value_as","","A generic method that takes returns a result containing the sysctl value if success, or a SysctlError on failure.",5,{"inputs":[{"name":"self"}],"output":{"generics":["box","sysctlerror"],"name":"result"}}],[11,"set_value","","Sets the value of a sysctl. Fetches and returns the new value if successful, or returns a SysctlError on failure. # Example ``` extern crate sysctl; use sysctl::Ctl;",5,{"inputs":[{"name":"self"},{"name":"ctlvalue"}],"output":{"generics":["ctlvalue","sysctlerror"],"name":"result"}}],[11,"flags","","Get the flags for a sysctl.",5,{"inputs":[{"name":"self"}],"output":{"generics":["ctlflags","sysctlerror"],"name":"result"}}],[11,"root","","Return an iterator over the complete sysctl tree.",6,{"inputs":[],"output":{"name":"self"}}],[11,"below","","Return an iterator over all sysctl entries below the given node.",6,{"inputs":[{"name":"ctl"}],"output":{"name":"self"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",5,null]],"paths":[[4,"CtlType"],[4,"CtlValue"],[4,"SysctlError"],[3,"CtlFlags"],[3,"Temperature"],[3,"Ctl"],[3,"CtlIter"]]};
searchIndex["void"] = {"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"void"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
initSearch(searchIndex);
